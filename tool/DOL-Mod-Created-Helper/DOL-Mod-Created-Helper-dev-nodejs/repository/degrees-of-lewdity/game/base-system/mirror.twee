:: Widgets Mirror [widget]
<<widget "calchairlengthstage">>
	<<if $hairlength gte 1000>>
		<<set $hairlengthstage to "feet">>
	<<elseif $hairlength gte 800>>
		<<set $hairlengthstage to "thighs">>
	<<elseif $hairlength gte 600>>
		<<set $hairlengthstage to "navel">>
	<<elseif $hairlength gte 400>>
		<<set $hairlengthstage to "chest">>
	<<elseif $hairlength gte 200>>
		<<set $hairlengthstage to "shoulder">>
	<<else>>
		<<set $hairlengthstage to "short">>
	<</if>>

	<<if $fringelength gte 1000>>
		<<set $fringelengthstage to "feet">>
	<<elseif $fringelength gte 800>>
		<<set $fringelengthstage to "thighs">>
	<<elseif $fringelength gte 600>>
		<<set $fringelengthstage to "navel">>
	<<elseif $fringelength gte 400>>
		<<set $fringelengthstage to "chest">>
	<<elseif $fringelength gte 200>>
		<<set $fringelengthstage to "shoulder">>
	<<else>>
		<<set $fringelengthstage to "short">>
	<</if>>
	<<set $hairlength = Math.clamp($hairlength, 0, 1000)>>
	<<set $fringelength = Math.clamp($fringelength, 0, 1000)>>
<</widget>>

<<widget "mirror">>
	<div id="mirror">
		<<if _args[0] isnot undefined>>
			<<mirrorDisplay _args[0]>>
		<<else>>
			<<mirrorDisplay>>
		<</if>>
	</div>
<</widget>>

<<widget "preMirror">>
	<<if (Browser.isMobile).any()>>
		<<set $showMannequins to 0>>
	<<else>>
		<<set $showMannequins to 1>>
	<</if>>
<</widget>>

<<widget "postMirror">>
	<<shopClothingFilterReset>> /* Due to the reusing of shop code */
<</widget>>

<<widget "mirrorDisplay">>
	<<switch $mirrorMenu>>
		<<case "appearance">>
			<<if playerBellyVisible(true) and !playerAwareTheyArePregnant()>>
				<<mirrorAppearancePregnancy>>
			<<else>>
				<<mirrorAppearance>>
			<</if>>
		<<case "skin">>
			<<mirrorSkin>>
		<<case "hair">>
			<<mirrorHair>>
		<<case "makeup">>
			<<mirrorMakeup>>
		<<case "transformation">>
			<<mirrorTransformation>>
		<<case "debug">>
			<<mirrorDebug>>
		<<default>>
			<<mirrorMenu _args[0]>>
	<</switch>>
	<<calchairlengthstage>>
	<br><br>
<</widget>>

<<widget "mirrorwet">>
	<<if _args[1] or _args[2] or _args[3]>>
		<br>
		<<set $_part to _args[0]>>
		<<set $_semen to _args[1]>>
		<<set $_slime to _args[2]>>
		<<set $_nectar to _args[3]>>
		Your $_part
		<<if $_part is "thighs" or $_part is "feet">>
			are
		<<else>>
			is
		<</if>>
		<<if $_semen gt 0>>
			<<switch Math.clamp($_semen, 1, 5)>>
				<<case 1>> <span class="blue">moist</span> with
				<<case 2>> <span class="purple">wet</span> with
				<<case 3>> <span class="purple">slick</span> with
				<<case 4>> <span class="pink">soaked</span> in
				<<case 5>> <span class="red">drenched</span> in
			<</switch>>
			<<if $_slime gt 0 and $_nectar gt 0>>
				semen,
			<<elseif $_slime gt 0 or $_nectar gt 0>>
				semen and
			<<else>>
				semen.
			<</if>>
		<</if>>
		<<if $_slime gt 0>>
			<<switch Math.clamp($_slime, 1, 5)>>
				<<case 1>> <span class="blue">moist</span> with
				<<case 2>> <span class="purple">wet</span> with
				<<case 3>> <span class="purple">slick</span> with
				<<case 4>> <span class="pink">soaked</span> in
				<<case 5>> <span class="red">drenched</span> in
			<</switch>>
			<<if $_nectar gt 0>>
				slime and
			<<else>>
				slime.
			<</if>>
		<</if>>
		<<if $_nectar gt 0>>
			<<switch Math.clamp($_nectar, 1, 5)>>
				<<case 1>> <span class="blue">moist</span> with
				<<case 2>> <span class="purple">wet</span> with
				<<case 3>> <span class="purple">slick</span> with
				<<case 4>> <span class="pink">soaked</span> in
				<<case 5>> <span class="red">drenched</span> in
			<</switch>>
			nectar.
		<</if>>
	<</if>>
<</widget>>

<<widget "mirrorMenu">>
	<<set $_mirror to _args[0] || 'mirror'>>
	You look into the $_mirror.
	<<if $fallenangel is 2>>
		A pathetic excuse of a person
	<<elseif $hallucinogen gte 200>>
		The $_mirror melts away into an inky black puddle, floating before you.
		<<if $_mirror is 'mirror'>>
			Shards of glass graze past your skin and dissolve into the air.
		<</if>>
		<br>
		You stare into the void, and the void
	<<elseif $hallucinogen gte 100>>
		The surface folds over itself at an angle you can't quite understand, and something unrecognisable
	<<elseif $hallucinogen gt 0>>
		The surface ripples at your presence, and a vaguely familiar <<girl>>
	<<elseif $trauma gte $traumamax>>
		A <<girl>> with glazed eyes
	<<elseif $pain gte 100>>
		A crying <<girl>>
	<<elseif $pain gte 40>>
		A tearful <<girl>>
	<<elseif $pain gte 1>>
		A frowning <<girl>>
	<<else>>
		A cheerful <<girl>>
	<</if>>
	stares back.
	<<if ["haunt", "despair"].includes($wraith.state) and $hallucinations gte 1 and random(1, 100) is 1>>
		<span class="fading">A pale figure stands behind.</span>
	<</if>>
	<br><br>
	<<link "Examine how you are seen by others">><<set $mirrorMenu to "appearance">><<replace #mirror>><<mirrorDisplay>><</replace>><<numberify "#passages > .passage">><</link>>
	<br><br>
	<<if !$simpleMirror>>
		__Skin__
		<br>
		<<link "Examine your skin">><<set $mirrorMenu to "skin">><<replace #mirror>><<mirrorDisplay>><</replace>><<numberify "#passages > .passage">><</link>>
		<br><br>
	<</if>>
	__Hair__
	<br>
	<<link "Change your hair style">><<set $mirrorMenu to "hair">><<replace #mirror>><<mirrorDisplay>><</replace>><<numberify "#passages > .passage">><</link>>
	<br><br>
	__Makeup__
	<br>
	<<link "Apply makeup">><<set $mirrorMenu to "makeup">><<replace #mirror>><<mirrorDisplay>><</replace>><<numberify "#passages > .passage">><</link>>
	<br><br>

	<<if $worn.neck.name is "love locket">>
		__Locket__
		<br>
		<<link [[Customise locket|Mirror Locket]]>><<set $passage_mirror to $passage>><</link>>
		<br><br>
	<</if>>

	<<if !$simpleMirror>>
		<<if $specialTransform is 1 or $physicalTransform is 1>>
			__Transformation__
			<br>
			<<link "Examine your inner self">><<set $mirrorMenu to "transformation">><<replace #mirror>><<mirrorDisplay>><</replace>><<numberify "#passages > .passage">><</link>>
		<<else>>
			Obtain otherworldly powers to examine further.
		<</if>>
	<</if>>
	<br><br>

	<<if $debug is 1>>
		<<link "Debug">><<set $mirrorMenu to "debug">><<replace #mirror>><<mirrorDisplay>><</replace>><</link>>
	<</if>>
<</widget>>

<<widget "mirrorAppearance">>
	<<link "Back">><<replace #mirror>><<mirrorMenu>><</replace>><<numberify "#passages > .passage">><<unset $mirrorMenu>><</link>>
	<br><br>
	<<settextcolorfromgender $player.gender_appearance>>
	You look like a <span @class="_text_color"><<if playerBellyVisible(true)>>pregnant <</if>><<girl>>.</span>
	<br>
	The following factors are contributing:
	<br>
	<<for _x range $player.gender_appearance_factors>>
		<<if _x.femininity is 0 or !_x.factor>>
			<<continue>>
		<</if>>
		<<settextcolorfromfemininity _x.femininity>>
		<span @class="_text_color">
			_x.factor
			<<if $debug is 1>>
				_x.femininity
			<<else>>
				<<print "+".repeat(
					Math.trunc(Math.clamp(
						Math.abs(_x.femininity) / 100, 0, 10
					))
				)>>
			<</if>>
		</span>
		<br>
	<</for>>
	<<if $debug is 1>>
		<<settextcolorfromfemininity $player.femininity>>
		Total femininity: <span @class="_text_color">$player.femininity</span>
		<br><br>
	<</if>>
	<br>

	<i>Attractiveness measures your ability to use your looks to your advantage.</i>
	<br>
	Attractiveness rating:
	<<if $attractiveness gte 5000>>
		<span class="green">S</span>
	<<elseif $attractiveness gte 4000>>
		<span class="teal">A</span>
	<<elseif $attractiveness gte 3000>>
		<span class="lblue">B</span>
	<<elseif $attractiveness gte 2000>>
		<span class="blue">C</span>
	<<elseif $attractiveness gte 1000>>
		<span class="purple">D</span>
	<<else>>
		<span class="pink">F</span>
	<</if>>
	<br><br>

	<span class="green">
		<<if $beauty gte ($beautymax / 7)>>
			Cute
			<br>
		<</if>>
		<<if $beauty gte ($beautymax / 7) * 2>>
			Pretty
			<br>
		<</if>>
		<<if $beauty gte ($beautymax / 7) * 3>>
			Charming
			<br>
		<</if>>
		<<if $beauty gte ($beautymax / 7) * 4>>
			Beautiful
			<br>
		<</if>>
		<<if $beauty gte ($beautymax / 7) * 5>>
			Ravishing
			<br>
		<</if>>
		<<if $beauty gte ($beautymax / 7) * 6>>
			Divine
			<br>
		<</if>>
		Hair length
		<br>
		<<if $worn.upper.type.includes("naked")>>
			Topless
			<br>
		<<elseif $worn.upper.reveal gte 500>>
			Revealing top
			<br>
		<</if>>
		<<if $worn.lower.type.includes("naked")>>
			Bottomless
			<br>
		<<elseif $worn.lower.reveal gte 500>>
			Revealing bottoms
			<br>
		<</if>>
		<<if $worn.under_lower.type.includes("naked")>>
			Pantiless
			<br>
		<<elseif $worn.under_lower.reveal gte 500>>
			Sexy underwear
			<br>
		<</if>>
		<<if $wolfgirl gte 6>>
			Wolfy
			<br>
		<</if>>
		<<if $cat gte 6>>
			Catlike
			<br>
		<</if>>
		<<if $cow gte 6>>
			Bovine
			<br>
		<</if>>
		<<if $harpy gte 6>>
			Harpy
			<br>
		<</if>>
		<<if $fox gte 6>>
			Vulpine
			<br>
		<</if>>
		<<if $angel gte 6>>
			Angel
			<br>
		<</if>>
		<<if $fallenangel gte 2>>
			Fallen angel
			<br>
		<</if>>
		<<if $demon gte 6>>
			Demon
			<br>
		<</if>>
		<<if $makeup.lipstick != 0 or $makeup.eyeshadow != 0 or $makeup.mascara != 0>>
			Attractive makeup
			<br>
		<</if>>
		<<if $worn.head.reveal gte 50>>
			Attractive headwear
			<br>
		<</if>>
		<<if $worn.face.reveal gte 50>>
			Attractive face accessory
			<br>
		<</if>>
		<<if $worn.neck.reveal gte 50>>
			Attractive collar
			<br>
		<</if>>
		<<if $worn.legs.reveal gte 50>>
			Attractive legwear
			<br>
		<</if>>
		<<if $worn.feet.reveal gte 50>>
			Attractive shoes
			<br>
		<</if>>
	</span>

	<br>
	<i>Allure is the dark side of attractiveness, and measures how much people will want to molest you.</i>
	<br>
	Allure:
	<<if $allure gte 6000 * $alluremod>>
		<span class="red">You look like you need to be ravaged.</span>
	<<elseif $allure gte 4000 * $alluremod>>
		<span class="pink">You look perverted.</span>
	<<elseif $allure gte 3000 * $alluremod>>
		<span class="purple">You look lewd.</span>
	<<elseif $allure gte 2000 * $alluremod>>
		<span class="blue">You stand out.</span>
	<<elseif $allure gte 1500 * $alluremod>>
		<span class="lblue">You attract attention.</span>
	<<elseif $allure gte 1000 * $alluremod>>
		<span class="teal">You attract glances.</span>
	<<else>>
		<span class="green">You look unremarkable.</span>
	<</if>>
	<br><br>

	Increasing your allure:
	<br>
	<span class="red">
		<<if $beauty gte ($beautymax / 7)>>
			Cute
			<br>
		<</if>>
		<<if $beauty gte ($beautymax / 7) * 2>>
			Pretty
			<br>
		<</if>>
		<<if $beauty gte ($beautymax / 7) * 3>>
			Charming
			<br>
		<</if>>
		<<if $beauty gte ($beautymax / 7) * 4>>
			Beautiful
			<br>
		<</if>>
		<<if $beauty gte ($beautymax / 7) * 5>>
			Ravishing
			<br>
		<</if>>
		<<if $beauty gte ($beautymax / 7) * 6>>
			Divine
			<br>
		<</if>>
		Hair length
		<br>
		<<if $worn.upper.type.includes("naked")>>
			Topless
			<br>
		<<elseif $worn.upper.reveal gte 500>>
			Revealing top
			<br>
		<</if>>
		<<if $worn.lower.type.includes("naked")>>
			Bottomless
			<br>
		<<elseif $worn.lower.reveal gte 500>>
			Revealing bottoms
			<br>
		<</if>>
		<<if $worn.under_lower.type.includes("naked")>>
			Pantiless
			<br>
		<<elseif $worn.under_lower.reveal gte 500>>
			Sexy underwear
			<br>
		<</if>>
		<<if $wolfgirl gte 6>>
			Wolfy
			<br>
		<</if>>
		<<if $cat gte 6>>
			Catlike
			<br>
		<</if>>
		<<if $cow gte 6>>
			Bovine
			<br>
		<</if>>
		<<if $harpy gte 6>>
			Harpy
			<br>
		<</if>>
		<<if $fox gte 6>>
			Foxy
			<br>
		<</if>>
		<<if $angel gte 6>>
			Angel
			<br>
		<</if>>
		<<if $fallenangel gte 2>>
			Fallen angel
			<br>
		<</if>>
		<<if $demon gte 6>>
			Demon
			<br>
		<</if>>
		<<if $earSlime.growth gt 50>>
			Ear slime pheromones
			<br>
		<</if>>
		<<if $makeup.lipstick != 0 or $makeup.eyeshadow != 0 or $makeup.mascara != 0>>
			Alluring makeup
			<br>
		<</if>>
		<<if $worn.head.reveal gte 50>>
			Alluring headwear
			<br>
		<</if>>
		<<if $worn.face.reveal gte 50>>
			Alluring face accessory
			<br>
		<</if>>
		<<if $worn.neck.reveal gte 50>>
			Alluring collar
			<br>
		<</if>>
		<<if $worn.legs.reveal gte 50>>
			Alluring legwear
			<br>
		<</if>>
		<<if $worn.feet.reveal gte 50>>
			Alluring shoes
			<br>
		<</if>>
		<<if Time.dayState is "night">>
			Night
			<br>
		<</if>>
		<<if $exposed gte 1>>
			Exposed
			<br>
		<</if>>
		<<if $liquidcount gte 1>>
			Smell of cum
			<br>
		<</if>>
		<<if $liquidcount gte 10>>
			Covered in cum
			<br>
		<</if>>
		<<if $liquidcount gte 30>>
			Drenched in cum
			<br>
		<</if>>
		<<if isBloodmoon()>>
			Full moon
			<br>
		<</if>>
	</span>
	<<if $fame.sex gte 1000>>
		<span class="red">Notorious slut</span>
		<br>
	<<elseif $fame.sex gte 600>>
		<span class="pink">Famous slut</span>
		<br>
	<<elseif $fame.sex gte 400>>
		<span class="purple">Recognised slut</span>
		<br>
	<<elseif $fame.sex gte 200>>
		<span class="blue">Known slut</span>
		<br>
	<<elseif $fame.sex gte 100>>
		<span class="lblue">Low-key slut</span>
		<br>
	<<elseif $fame.sex gte 30>>
		<span class="teal">Obscure slut</span>
		<br>
	<</if>>

	<<if $fame.prostitution gte 1000>>
		<span class="red">Notorious whore</span>
		<br>
	<<elseif $fame.prostitution gte 600>>
		<span class="pink">Famous whore</span>
		<br>
	<<elseif $fame.prostitution gte 400>>
		<span class="purple">Recognised whore</span>
		<br>
	<<elseif $fame.prostitution gte 200>>
		<span class="blue">Known whore</span>
		<br>
	<<elseif $fame.prostitution gte 100>>
		<span class="lblue">Low-key whore</span>
		<br>
	<<elseif $fame.prostitution gte 30>>
		<span class="teal">Obscure whore</span>
		<br>
	<</if>>

	<<if $fame.rape gte 1000>>
		<span class="red">Notorious fucktoy</span>
		<br>
	<<elseif $fame.rape gte 600>>
		<span class="pink">Famous fucktoy</span>
		<br>
	<<elseif $fame.rape gte 400>>
		<span class="purple">Recognised fucktoy</span>
		<br>
	<<elseif $fame.rape gte 200>>
		<span class="blue">Known fucktoy</span>
		<br>
	<<elseif $fame.rape gte 100>>
		<span class="lblue">Low-key fucktoy</span>
		<br>
	<<elseif $fame.rape gte 30>>
		<span class="teal">Obscure fucktoy</span>
		<br>
	<</if>>

	<<if $bestialitydisable is "f">>
		<<if $fame.bestiality gte 1000>>
			<span class="red">Notorious bitch</span>
			<br>
		<<elseif $fame.bestiality gte 600>>
			<span class="pink">Famous bitch</span>
			<br>
		<<elseif $fame.bestiality gte 400>>
			<span class="purple">Recognised bitch</span>
			<br>
		<<elseif $fame.bestiality gte 200>>
			<span class="blue">Known bitch</span>
			<br>
		<<elseif $fame.bestiality gte 100>>
			<span class="lblue">Low-key bitch</span>
			<br>
		<<elseif $fame.bestiality gte 30>>
			<span class="teal">Obscure bitch</span>
			<br>
		<</if>>
	<<else>>
		<<if $fame.bestiality gte 1000>>
			<span class="red">Notorious monster fucker</span>
			<br>
		<<elseif $fame.bestiality gte 600>>
			<span class="pink">Famous monster fucker</span>
			<br>
		<<elseif $fame.bestiality gte 400>>
			<span class="purple">Recognised monster fucker</span>
			<br>
		<<elseif $fame.bestiality gte 200>>
			<span class="blue">Known monster fucker</span>
			<br>
		<<elseif $fame.bestiality gte 100>>
			<span class="lblue">Low-key monster fucker</span>
			<br>
		<<elseif $fame.bestiality gte 30>>
			<span class="teal">Obscure monster fucker</span>
			<br>
		<</if>>
	<</if>>

	<<if $fame.exhibitionism gte 1000>>
		<span class="red">Notorious flaunter</span>
		<br>
	<<elseif $fame.exhibitionism gte 600>>
		<span class="pink">Famous flaunter</span>
		<br>
	<<elseif $fame.exhibitionism gte 400>>
		<span class="purple">Recognised flaunter</span>
		<br>
	<<elseif $fame.exhibitionism gte 200>>
		<span class="blue">Known flaunter</span>
		<br>
	<<elseif $fame.exhibitionism gte 100>>
		<span class="lblue">Low-key flaunter</span>
		<br>
	<<elseif $fame.exhibitionism gte 30>>
		<span class="teal">Obscure flaunter</span>
		<br>
	<</if>>
	<<if $fame.pregnancy gte 1000>>
		<span class="red">Notorious broodmother</span>
		<br>
	<<elseif $fame.pregnancy gte 600>>
		<span class="pink">Famous broodmother</span>
		<br>
	<<elseif $fame.pregnancy gte 400>>
		<span class="purple">Recognised breeder</span>
		<br>
	<<elseif $fame.pregnancy gte 200>>
		<span class="blue">Known breeder</span>
		<br>
	<<elseif $fame.pregnancy gte 100>>
		<span class="lblue">Low-key mother</span>
		<br>
	<<elseif $fame.pregnancy gte 50>>
		<span class="teal">Obscure mother</span>
		<br>
	<</if>>
	<<if $fame.impreg gte 1000>>
		<span class="red">Notorious allfather</span>
		<br>
	<<elseif $fame.impreg gte 600>>
		<span class="pink">Famous allfather</span>
		<br>
	<<elseif $fame.impreg gte 400>>
		<span class="purple">Recognised sire</span>
		<br>
	<<elseif $fame.impreg gte 200>>
		<span class="blue">Known sire</span>
		<br>
	<<elseif $fame.impreg gte 100>>
		<span class="lblue">Low-key inseminator</span>
		<br>
	<<elseif $fame.impreg gte 50>>
		<span class="teal">Obscure inseminator</span>
		<br>
	<</if>>

	<br>
	Decreasing your allure:
	<br>
	<<if !["island"].includes($location)>>
		<<if $fame.scrap gte 1000>>
			<span class="green">Notorious scrapper</span>
			<br>
		<<elseif $fame.scrap gte 600>>
			<span class="teal">Famous scrapper</span>
			<br>
		<<elseif $fame.scrap gte 400>>
			<span class="lblue">Recognised scrapper</span>
			<br>
		<<elseif $fame.scrap gte 200>>
			<span class="blue">Known scrapper</span>
			<br>
		<<elseif $fame.scrap gte 100>>
			<span class="purple">Low-key scrapper</span>
			<br>
		<<elseif $fame.scrap gte 30>>
			<span class="pink">Obscure scrapper</span>
			<br>
		<</if>>
		<<if $fame.good gte 1000>>
			<span class="green">Notorious do-gooder</span>
			<br>
		<<elseif $fame.good gte 600>>
			<span class="teal">Famous do-gooder</span>
			<br>
		<<elseif $fame.good gte 400>>
			<span class="lblue">Recognised do-gooder</span>
			<br>
		<<elseif $fame.good gte 200>>
			<span class="blue">Known do-gooder</span>
			<br>
		<<elseif $fame.good gte 100>>
			<span class="purple">Low-key do-gooder</span>
			<br>
		<<elseif $fame.good gte 30>>
			<span class="pink">Obscure do-gooder</span>
			<br>
		<</if>>
		<<if $fame.business gte 1000>>
			<span class="green">Notorious entrepreneur</span>
			<br>
		<<elseif $fame.business gte 600>>
			<span class="teal">Famous entrepreneur</span>
			<br>
		<<elseif $fame.business gte 400>>
			<span class="lblue">Recognised entrepreneur</span>
			<br>
		<<elseif $fame.business gte 200>>
			<span class="blue">Known entrepreneur</span>
			<br>
		<<elseif $fame.business gte 100>>
			<span class="purple">Low-key entrepreneur</span>
			<br>
		<<elseif $fame.business gte 30>>
			<span class="pink">Obscure entrepreneur</span>
			<br>
		<</if>>
		<<if $fame.social gte 1000>>
			<span class="green">Notorious schmoozer</span>
			<br>
		<<elseif $fame.social gte 600>>
			<span class="teal">Famous socialite</span>
			<br>
		<<elseif $fame.social gte 400>>
			<span class="lblue">Recognised socialite</span>
			<br>
		<<elseif $fame.social gte 200>>
			<span class="blue">Known socialite</span>
			<br>
		<<elseif $fame.social gte 100>>
			<span class="purple">Low-key socialite</span>
			<br>
		<<elseif $fame.social gte 30>>
			<span class="pink">Obscure socialite</span>
			<br>
		<</if>>
		<<if $fame.model gte 1000>>
			<span class="green">Notorious show off</span>
			<br>
		<<elseif $fame.model gte 600>>
			<span class="teal">Famous model</span>
			<br>
		<<elseif $fame.model gte 400>>
			<span class="lblue">Recognised model</span>
			<br>
		<<elseif $fame.model gte 200>>
			<span class="blue">Known model</span>
			<br>
		<<elseif $fame.model gte 100>>
			<span class="purple">Low-key model</span>
			<br>
		<<elseif $fame.model gte 30>>
			<span class="pink">Obscure model</span>
			<br>
		<</if>>
	<</if>>
	<<if $moorLuck gt 5>>
		<span class="green">????</span>
		<br>
	<<elseif $moorLuck gt 0>>
		<span class="lblue">????</span>
		<br>
	<</if>>

	<br><br>
	__Behaviour__
	<br>
	<<if $player.gender_posture is "n">>
		You turn around to get a look at yourself. You look like a <<girl>>. Maybe if you
		carried yourself differently you could change that.
	<<elseif $player.gender_posture is "f">>
		You strike a few girly poses and put on your best feminine voice.
		<br>
		<span class="pink">Others will be more likely to think that you're a girl.</span>
	<<elseif $player.gender_posture is "m">>
		You flex your muscles and add some gruff to your voice.
		<br>
		<span class="lblue">Others will be more likely to think that you're a boy.</span>
	<</if>>
	<br>
	<<linkradiogroup "$player.gender_posture" `{
		"Act naturally": "n",
		"Take a feminine posture": "f",
		"Take a masculine posture": "m",
	}`>>
<</widget>>

<<widget "mirrorAppearancePregnancy">>
	<<run updateMoment()>>
	You look like a <span class="lewd">pregnant <<girl>>...</span><<garousal>><<gstress>>
	<<arousal 300>><<stress 10>>
	<br><br>

	<<if getPregnancyObject().potentialFathers.length is 1>>
		<<set $_fatherName to pregnancyNameCorrection(getPregnancyObject().potentialFathers[0].source)>>
		<span class="lewd">It's clear that <<print $_fatherName === "yourself" ? "you are" : $_fatherName + " is">> the father.</span>
	<<else>>
		<span class="red">You wonder who the father is.</span>
	<</if>>
	<<set getPregnancyObject().awareOf to "mirror">>
<</widget>>

<<widget "mirrorSkin">>
	You are looking at your skin.
	<br>
	<<link "Back">><<replace #mirror>><<mirrorMenu>><</replace>><<numberify "#passages > .passage">><<unset $mirrorMenu>><</link>>
	<br><br>

	<<if $liquidcount gt 0>>
		__Body liquids__
		<<mirrorwet "neck" $player.bodyliquid.neck.semen $player.bodyliquid.neck.goo $player.bodyliquid.neck.nectar>>
		<<mirrorwet "right arm" $player.bodyliquid.rightarm.semen $player.bodyliquid.rightarm.goo $player.bodyliquid.rightarm.nectar>>
		<<mirrorwet "left arm" $player.bodyliquid.leftarm.semen $player.bodyliquid.leftarm.goo $player.bodyliquid.leftarm.nectar>>
		<<mirrorwet "thighs" $player.bodyliquid.thigh.semen $player.bodyliquid.thigh.goo $player.bodyliquid.thigh.nectar>>
		<<mirrorwet "bottom" $player.bodyliquid.bottom.semen $player.bodyliquid.bottom.goo $player.bodyliquid.bottom.nectar>>
		<<mirrorwet "tummy" $player.bodyliquid.tummy.semen $player.bodyliquid.tummy.goo $player.bodyliquid.tummy.nectar>>
		<<mirrorwet "chest" $player.bodyliquid.chest.semen $player.bodyliquid.chest.goo $player.bodyliquid.chest.nectar>>
		<<mirrorwet "face" $player.bodyliquid.face.semen $player.bodyliquid.face.goo $player.bodyliquid.face.nectar>>
		<<mirrorwet "hair" $player.bodyliquid.hair.semen $player.bodyliquid.hair.goo $player.bodyliquid.hair.nectar>>
		<<mirrorwet "feet" $player.bodyliquid.feet.semen $player.bodyliquid.feet.goo $player.bodyliquid.feet.nectar>>
		<<mirrorwet "labia" $player.bodyliquid.vaginaoutside.semen $player.bodyliquid.vaginaoutside.goo $player.bodyliquid.vaginaoutside.nectar>>
		<<mirrorwet "vagina" $player.bodyliquid.vagina.semen $player.bodyliquid.vagina.goo $player.bodyliquid.vagina.nectar>>
		<<mirrorwet "penis" $player.bodyliquid.penis.semen $player.bodyliquid.penis.goo $player.bodyliquid.penis.nectar>>
		<<mirrorwet "anus" $player.bodyliquid.anus.semen $player.bodyliquid.anus.goo $player.bodyliquid.anus.nectar>>
		<<mirrorwet "mouth" $player.bodyliquid.mouth.semen $player.bodyliquid.mouth.goo $player.bodyliquid.mouth.nectar>>
	<<else>>
		Your skin feels clean.
	<</if>>
	<br><br>
	__Body Writing__<br>

	<<if $bodyWritingSelected is null>>
		<<unset $bodyWritingSelected>>
	<</if>>
	<<if $bodyWritingSelected isnot undefined>>
		You write
		<<if isLoveInterest($skin[$bodyPartSelected].special)>>
			"<span class="lewd"><<print $bodyWritingSelected>></span>"
		<<elseif $skin[$bodyPartSelected].special isnot "none">>
			"<span class="red"><<print $bodyWritingSelected>></span>"
		<<elseif $skin[$bodyPartSelected].lewd is 1>>
			"<span class="pink"><<print $bodyWritingSelected>></span>"
		<<else>>
			"<span class="purple"><<print $bodyWritingSelected>></span>"
		<</if>>
		on your <<bodypart $bodyPartSelected>>.
		<<unset $bodyWritingSelected>>
		<<unset $bodyPartSelected>>
		<br><br>
	<</if>>
	<<bodywriting>>
	<br>

	<<bodywritingOptions>>

	/*Needs to be last*/
	<<bodywritingMenuLinks>>
<</widget>>

<<widget "bodywritingOptions">>
	<<set _bodyWritingOptions to {
		General: {
		"Cute boy":"cute_boy",
		"Cute girl":"cute_girl",
		"Orphan":"orphan"
		}
	}>>

	<<if $beauty gte ($beautymax / 7) * 3>>
		<<set _bodyWritingOptions.General["Handsome"] to "handsome">>
		<<set _bodyWritingOptions.General["Pretty"] to "pretty">>
	<</if>>
	<<if $beauty gte ($beautymax / 7) * 4>>
		<<set _bodyWritingOptions.General["Stud"] to "stud">>
		<<set _bodyWritingOptions.General["Beauty"] to "beauty">>
	<</if>>
	<<if $beauty gte ($beautymax / 7) * 5>>
		<<set _bodyWritingOptions.General["Beautiful"] to "beautiful">>
	<</if>>

	<<if $trauma gte (($traumamax / 5) * 2)>>
		<<set _bodyWritingOptions.General["Daddy issues"] to "daddy_issues">>
		<<set _bodyWritingOptions.General["Mommy issues"] to "mommy_issues">>
		<<set _bodyWritingOptions.General["Trashy"] to "trashy">>
	<</if>>
	<<if $trauma gte (($traumamax / 5) * 3)>>
		<<set _bodyWritingOptions.General["Worthless"] to "worthless">>
		<<set _bodyWritingOptions.General["Oh no"] to "oh_no">>
		<<set _bodyWritingOptions.General["Dumb bitch"] to "dumb_bitch">>
	<</if>>

	<<if $promiscuity gte 15>>
		<<set _bodyWritingOptions.General["Hot"] to "hot">>
	<</if>>
	<<if $promiscuity gte 35>>
		<<set _bodyWritingOptions.Promiscuity = {}>>
		<<set _bodyWritingOptions.Promiscuity["Slut"] to "slut">>
		<<set _bodyWritingOptions.Promiscuity["Promiscuous"] to "promiscuous">>
		<<set _bodyWritingOptions.Promiscuity["Wanton"] to "wanton">>
		<<set _bodyWritingOptions.Promiscuity["D.T.F."] to "dtf">>
	<</if>>

	<<if $promiscuity gte 55>>
		<<set _bodyWritingOptions.Promiscuity["Insatiable slut"] to "insatiable_slut">>
		<<set _bodyWritingOptions.Promiscuity["Free Sex"] to "free_sex">>
		<<set _bodyWritingOptions.Promiscuity["Town bicycle"] to "town_bicycle">>
		<<set _bodyWritingOptions.Promiscuity["Size queen"] to "size_queen">>
		<<if $orgasmtrait gte 1>>
			<<set _bodyWritingOptions.Promiscuity["Sex addict"] to "sex_addict">>
			<<set _bodyWritingOptions.Promiscuity["Make me cum"] to "make_me_cum">>
		<</if>>
	<</if>>

	<<if $promiscuity gte 75>>
		<<set _bodyWritingOptions.Promiscuity["Fuck Me"] to "fuck_me">>
		<<set _bodyWritingOptions.Promiscuity["Cocksucker"] to "cocksucker">>
		<<set _bodyWritingOptions.Promiscuity["Cum dump"] to "cum_dump">>
		<<set _bodyWritingOptions.Promiscuity["Public Slut"] to "public_slut">>
		<<if $analstat gte 100>>
			<<set _bodyWritingOptions.Promiscuity["Buttslut"] to "buttslut">>
			<<set _bodyWritingOptions.Promiscuity["Anal whore"] to "anal_whore">>
		<</if>>
	<</if>>

	<<if $promiscuity gte 35>>
		<<set _bodyWritingOptions.Prostitution = {}>>
		<<if $trauma gte (($traumamax / 5) * 2)>>
			<<set _bodyWritingOptions.Prostitution["It's not rape if you pay me"] to "its_not_rape_if_you_pay_me">>
		<</if>>
		<<set _bodyWritingOptions.Prostitution["£5 whore"] to "five_pound_whore">>
		<<set _bodyWritingOptions.Prostitution["£10 a pop"] to "ten_pound_a_pop">>
		<<set _bodyWritingOptions.Prostitution["Slut for hire"] to "slut_for_hire">>
	<</if>>
	<<if $promiscuity gte 55>>
		<<set _bodyWritingOptions.Prostitution["£25 per fuck"] to "twenty_five_pound_per_fuck">>
		<<set _bodyWritingOptions.Prostitution["£100"] to "one_hundred_pound">>
		<<set _bodyWritingOptions.Prostitution["Body for sale"] to "body_for_sale">>
		<<if $trauma gte (($traumamax / 5) * 3)>>
			<<set _bodyWritingOptions.Prostitution["Stupid whore"] to "stupid_whore">>
		<<else>>
			<<set _bodyWritingOptions.Prostitution["Whore"] to "whore">>
		<</if>>
		<<set _bodyWritingOptions.Prostitution["Prostitute"] to "prostitute">>
	<</if>>
	<<if $exhibitionism gte 35>>
		<<set _bodyWritingOptions.Exhibitionism to {}>>
		<<set _bodyWritingOptions.Exhibitionism["Pervert"] to "pervert">>
		<<set _bodyWritingOptions.Exhibitionism["Attention whore"] to "attention_whore">>
		<<set _bodyWritingOptions.Exhibitionism["Flaunter"] to "flaunter">>
		<<set _bodyWritingOptions.Exhibitionism["Object"] to "object">>
		<<set _bodyWritingOptions.Exhibitionism["Strip me"] to "strip_me">>
		<<set _bodyWritingOptions.Exhibitionism["Ask to see me naked"] to "ask_to_see_me_naked">>
	<</if>>
	<<if $deviancy gte 55>>
		<<set _bodyWritingOptions.Deviancy to {}>>
		<<set _bodyWritingOptions.Deviancy["Doggy slut"] to "doggy_slut">>
		<<set _bodyWritingOptions.Deviancy["Animal"] to "animal">>
		<<set _bodyWritingOptions.Deviancy["Beast fucker"] to "beast_fucker">>
		<<set _bodyWritingOptions.Deviancy["Breedable"] to "breedable">>
		<<set _bodyWritingOptions.Deviancy["Deviant"] to "deviant">>
	<</if>>
	<<if $masochism_level gte 1>>
		<<set _bodyWritingOptions.Masochism to {}>>
		<<set _bodyWritingOptions.Masochism["Hit me"] to "hit_me">>
		<<set _bodyWritingOptions.Masochism["Hurt me"] to "hurt_me">>
		<<set _bodyWritingOptions.Masochism["Treat me bad"] to "treat_me_bad">>
		<<set _bodyWritingOptions.Masochism["Make me squeal"] to "make_me_squeal">>
	<</if>>
	<<if $submissive gte 1200>>
		<<set _bodyWritingOptions.Submission to {}>>
		<<set _bodyWritingOptions.Submission["Submissive"] to "submissive">>
		<<set _bodyWritingOptions.Submission["Pet"] to "pet">>

			<<if $deviancy gte 35>>
			<<set _bodyWritingOptions.Submission["Public pet"] to "public_pet">>
		<</if>>

		<<if $promiscuity gte 55>>
			<<set _bodyWritingOptions.Submission["Free use"] to "free_use">>
			<<set _bodyWritingOptions.Submission["Use Me"] to "use_me">>
		<</if>>

		<<if $submissive gte 1500>>
			<<set _bodyWritingOptions.Submission["Slave"] to "slave">>
			<<set _bodyWritingOptions.Submission["Enslave Me"] to "enslave_me">>
			<<set _bodyWritingOptions.Submission["Cum rag"] to "cum_rag">>
			<<if $promiscuity gte 75>>
				<<set _bodyWritingOptions.Submission["Fuckdoll"] to "fuckdoll">>
				<<set _bodyWritingOptions.Submission["Fucktoy"] to "fucktoy">>
				<<if $player.penisExist>>
					<<set _bodyWritingOptions.Submission["Walking dildo"] to "walking_dildo">>
				<</if>>
			<</if>>
		<</if>>
	<</if>>
	<<if ($player.vaginaExist or ($sexStats.anus.pregnancy.awareOf or $sexStats.anus.pregnancy.givenBirth gte 1)) and $promiscuity gte 75>>
		<<set _bodyWritingOptions.Pregnancy to {}>>
		<<set _bodyWritingOptions.Pregnancy["Brood mother"] to "brood_mother">>
		<<set _bodyWritingOptions.Pregnancy["Inseminate me"] to "inseminate_me">>
		<<set _bodyWritingOptions.Pregnancy["Impregnate me"] to "impregnate_me">>
		<<set _bodyWritingOptions.Pregnancy["Pregnancy slut"] to "pregnancy_slut">>
		<<set _bodyWritingOptions.Pregnancy["Breeding ground"] to "breeding_ground">>
	<</if>>

	<<set _bodyWritingOptions["Love Interests"] to {}>>
	<<if $robinromance is 1>>
		<<set _bodyWritingOptions["Love Interests"]["Robin's Protector"] to "robins_protector">>
		<<set _bodyWritingOptions["Love Interests"]["Robin & I"] to "robin_and_i">>
		<<set _bodyWritingOptions["Love Interests"]["The Orphan Lover"] to "the_orphan_lover">>
		<<if ($player.penisExist or $player.gender_appearance is "m" or $backgroundTraits.includes("crossdresser"))>>
			<<set _bodyWritingOptions["Love Interests"]["Robin's Boyfriend"] to "robins_boyfriend">>
		<</if>>
		<<if ($player.vaginaExist or $player.gender_appearance is "f" or $backgroundTraits.includes("crossdresser"))>>
			<<set _bodyWritingOptions["Love Interests"]["Robin's Girlfriend"] to "robins_girlfriend">>
		<</if>>
	<</if>>
	<<if $whitneyromance is 1>>
		<<set _bodyWritingOptions["Love Interests"]["Whitney's Pet"] to "whitneys_pet">>
		<<set _bodyWritingOptions["Love Interests"]["Property of Whitney"] to "property_of_whitney">>
		<<set _bodyWritingOptions["Love Interests"]["Whitney's Toy"] to "whitneys_toy">>
		<<if ($player.penisExist or $player.gender_appearance is "m" or $backgroundTraits.includes("crossdresser"))>>
			<<set _bodyWritingOptions["Love Interests"]["Whitney's Boyslut"] to "whitneys_boyslut">>
		<</if>>
		<<if ($player.vaginaExist or $player.gender_appearance is "f" or $backgroundTraits.includes("crossdresser"))>>
			<<set _bodyWritingOptions["Love Interests"]["Whitney's Slut"] to "whitneys_slut">>
		<</if>>
	<</if>>
	<<if $kylarenglish gte 1 and $NPCName[$NPCNameList.indexOf("Kylar")].state isnot "prison">>
		<<set _bodyWritingOptions["Love Interests"]["Kylar's Obsession"] to "kylars_obsession">>
		<<set _bodyWritingOptions["Love Interests"]["Love Kylar Forever"] to "love_kylar_forever">>
		<<set _bodyWritingOptions["Love Interests"]["Reserved for Kylar"] to "reserved_for_kylar">>
		<<set _bodyWritingOptions["Love Interests"]["Just Kylar"] to "just_kylar">>
	<</if>>
	<<if $syndromeeden is 1>>
		<<set _bodyWritingOptions["Love Interests"]["Eden's Companion"] to "edens_companion">>
		<<set _bodyWritingOptions["Love Interests"]["Hunter and Prey"] to "hunter_and_prey">>
		<<set _bodyWritingOptions["Love Interests"]["It's Lonely in the Woods"] to "its_lonely_in_the_woods">>
		<<set _bodyWritingOptions["Love Interests"]["Something is Hunting you"] to "something_is_hunting_you">>
	<</if>>
	<<if $dateCount.Avery gte 3 and $NPCName[$NPCNameList.indexOf("Avery")].state isnot "dismissed">>
		<<set _bodyWritingOptions["Love Interests"]["Avery's Trophy"] to "averys_trophy">>
		<<set _bodyWritingOptions["Love Interests"]["Endearing"] to "endearing">>
		<<if ($player.penisExist or $player.gender_appearance is "m" or $backgroundTraits.includes("crossdresser"))>>
			<<set _bodyWritingOptions["Love Interests"]["Uptown Boy"] to "uptown_boy">>
		<</if>>
		<<if ($player.vaginaExist or $player.gender_appearance is "f" or $backgroundTraits.includes("crossdresser"))>>
			<<set _bodyWritingOptions["Love Interests"]["Uptown Girl"] to "uptown_girl">>
		<</if>>
		<<set _bodyWritingOptions["Love Interests"]["Avery's Monopoly"] to "averys_monopoly">>
	<</if>>
	<<if $farm_stage gte 7 and $alex_countdown is undefined>>
		<<set _bodyWritingOptions["Love Interests"]["Alex's Partner"] to "alexs_partner">>
		<<set _bodyWritingOptions["Love Interests"]["Sunrise to Sunset"] to "sunrise_to_sunset">>
		<<set _bodyWritingOptions["Love Interests"]["Hay Baler"] to "hay_baler">>
		<<if ($player.penisExist or $player.gender_appearance is "m" or $backgroundTraits.includes("crossdresser"))>>
			<<set _bodyWritingOptions["Love Interests"]["Cowboy"] to "cowboy">>
		<</if>>
		<<if ($player.vaginaExist or $player.gender_appearance is "f" or $backgroundTraits.includes("crossdresser"))>>
			<<set _bodyWritingOptions["Love Interests"]["Cowgirl"] to "cowgirl">>
		<</if>>
	<</if>>
	<<if $sydneyromance is 1>>
		<<set _bodyWritingOptions["Love Interests"]["Sydney's Saviour"] to "sydneys_savior">>
		<<set _bodyWritingOptions["Love Interests"]["Bound to Sydney"] to "bound_to_sydney">>
		<<set _bodyWritingOptions["Love Interests"]["Sydney Makes Me :)"] to "sydney_makes_me_smile">>
		<<if $NPCName[$NPCNameList.indexOf("Sydney")].purity gt 1>>
			<<set _bodyWritingOptions["Love Interests"]["Purest Love"] to "purest_love">>
		<<else>>
			<<set _bodyWritingOptions["Love Interests"]["Lusty Sinners"] to "lusty_sinners">>
		<</if>>
	<</if>>
	<<if $syndromewolves is 1 and $deviancy gte 35>>
		<<set _bodyWritingOptions["Love Interests"]["Black Wolf's Bitch"] to "black_wolfs_bitch">>
		<<set _bodyWritingOptions["Love Interests"]["All for my Alpha"] to "all_for_my_alpha">>
		<<if $wolfpackleader is 1>>
			<<set _bodyWritingOptions["Love Interests"]["Leader of the Pack"] to "leader_of_the_pack">>
		<</if>>
		<<set _bodyWritingOptions["Love Interests"]["Runs With Wolves"] to "runs_with_wolves">>
	<</if>>
	<<if $syndromebird is 1>>
		<<set _bodyWritingOptions["Love Interests"]["Great Hawk's Spouse"] to "great_hawks_spouse">>
		<<set _bodyWritingOptions["Love Interests"]["Soaring With Love"] to "soaring_with_love">>
		<<set _bodyWritingOptions["Love Interests"]["Terror's Mate"] to "terrors_mate">>
		<<set _bodyWritingOptions["Love Interests"]["Free Bird"] to "free_bird">>
	<</if>>
	<<if $debug is 1>>
		<<set _bodyWritingOptions["Debug"] to setup.bodywriting>>
		<<set _debugBodywritingOptionsKeys to Object.keys(setup.bodywriting)>>
		<<link [[Wash yourself|$passage]]>>
			<<set $mirrorMenu to "skin">>
			<<wash>>
		<</link>>
		<<link [[Bind hands|$passage]]>>
			<<set $mirrorMenu to "skin">>
			<<bind>>
		<</link>>
		<br/>
		<<print Object.values(setup.bodywriting).length>> known bodywriting options.
	<</if>>
<</widget>>

<<widget "bodywritingMenuLinks">>
	<div id="bodywritingMenuLinks">
	<<set _keys to Object.keys(_bodyWritingOptions)>>
	<<if $bodywritingSet is undefined>>
		<<set $bodywritingSet to "General">>
	<</if>>
	<<for _i to 0; _i lt _keys.length; _i++>>
		<<capture _i _keys>>
			<span @id="'link-'+_keys[_i].replace(/ /g,'-')" @class="(_keys[_i] is $bodywritingSet ? 'selected' : '')">
			<<link _keys[_i]>>
				<<removeclass `'#link-'+$bodywritingSet.replace(/ /g,'-')` "selected">>
				<<set $bodywritingSet to clone(_keys[_i])>>
				<<addclass `'#link-'+$bodywritingSet.replace(/ /g,'-')` "selected">>
				<<replace "#bodywritingMenu">><<bodywritingMenu _args[0]>><</replace>>
			<</link>> |
			</span>
		<</capture>>
	<</for>>
	</div>

	<br>
	<div id="bodywritingMenu" class="no-numberify">
		<<bodywritingMenu _args[0]>>
	</div>
	<br><br>
<</widget>>

<<widget "bodywritingMenu">>
	<<if Object.keys(_bodyWritingOptions[$bodywritingSet]).length gt 0>>
		<<set _bodyPartOptions to {}>>
		<<if _args[0] isnot undefined>>
			<<set _bodyPartOptionsSkip to _args[0]>>
		<<else>>
			<<set _bodyPartOptionsSkip to ["back", "left_bottom", "right_bottom"]>>
		<</if>>
		<<for _label, _value range $skin>>
			<<if _bodyPartOptionsSkip.includes(_label)>>
				<<continue>>
			<<elseif Object.keys(_value).length is 0>>
				<<silently>><<bodypart _label>><</silently>>
				<<set _bodyPartOptions[_text_output.toUpperFirst()] to _label>>
			<</if>>
		<</for>>
		<<if $debug is 1>>
			Write
			<<listbox "_bodyWritingDebugSelected">>
				<<optionsfrom _bodyWritingOptions[$bodywritingSet]>>
			<</listbox>>
			everywhere
			<<link [[Confirm|$passage]]>>
				<<set $mirrorMenu to "skin">>
				<<for _part, _value range $skin>>
					<<add_bodywriting _part _bodyWritingDebugSelected "pen">>
				<</for>>
			<</link>>
			<br />
			Write
			<<listbox "_bodyWritingDebugSelected">>
				<<optionsfrom _bodyWritingOptions[$bodywritingSet]>>
			<</listbox>>
			everywhere where it has custom sprites


			<<link [[Confirm|$passage]]>>
				<<set $mirrorMenu to "skin">>
				<<for _part, _value range $skin>>
					<<if _bodyWritingDebugSelected.sprites.includes(_part)>>
						<<add_bodywriting _part _bodyWritingDebugSelected "pen">>
					<</if>>
				<</for>>
			<</link>>
			<br />
			<br />
		<</if>>

		<<if Object.keys(_bodyPartOptions).length gt 0>>
			Write
			<<listbox "_bodyWritingSelected">>
				<<optionsfrom _bodyWritingOptions[$bodywritingSet]>>
			<</listbox>>
			on your
			<<listbox "_bodyPartSelected">>
				<<optionsfrom _bodyPartOptions>>
			<</listbox>>

			<<link [[Confirm|$passage]]>>
				<<set $mirrorMenu to "skin">>
				<<set $bodyWritingSelected to Object.keys(_bodyWritingOptions[$bodywritingSet])[Object.values(_bodyWritingOptions[$bodywritingSet]).indexOf(_bodyWritingSelected)]>>
				<<set $bodyPartSelected to _bodyPartSelected>>
				<<add_bodywriting _bodyPartSelected _bodyWritingSelected "pen">>
			<</link>>
		<<else>>
			You're not sure where else you can write an advertisement.
		<</if>>
	<</if>>
<</widget>>

<<widget "hairDescription">>
	You check your hair in the mirror.
	<<if $hairtype is "default" and $fringetype is "default">>
	Your hair is not currently styled. Your sides are positioned <<if $hairposition is "front">>in front of<<else>>behind<</if>> your body.
	Your hair
	<<if $hairgelBottles is undefined>><<set $hairgelBottles to 0>><</if>>
	<<if $earsposition is "front">>
			<span class="gold"> is tucked behind your ears</span>
	<<else>>
			<span class="gold">hangs in front of your ears</span>
	<</if>>
	and is
	<<if $ruffledisable is "t">>
		<mouse class = "gold tooltip-small" style="border-bottom-color:white">
			fixed in place.
			<span class="black">Your hairstyle cannot be ruined. <br> <i class="red">Selecting a new hairstyle will re-enable hair ruffling. <<print ($hairgelBottles is 0 ? "Hair gel can be acquired at the shops." : "Hair gel will need to be re-applied.")>></i></span>
		</mouse>
	<<else>>
		<mouse class = "gold tooltip-small" style="border-bottom-color:white">
			not fixed in place.
			<span class="black">Certain situations may change your hair to a messier style. <br> <i class="teal">You can apply hair gel to disable hair ruffling.<<print ($hairgelBottles is 0 ? " Hair gel can be acquired at the shops." : "")>></i> </span>
		</mouse>
	<</if>>
		<div class="no-numberify">
			<<link [[Randomise your hairstyle|$passage]]>>
				<<set _hairType to Object.values(_hairTypeByName)>>
				<<set $hairtype to _hairType[random(0,_hairType.length - 1)]>>
				<<set _fringeType to Object.values(_fringeTypeByName)>>
				<<set $fringetype to _fringeType[random(0,_fringeType.length - 1)]>>
				<<set $hairposition to ["front","back"][random(0,1)]>>
			<</link>>
			|
			<<switch $hairposition>>
				<<case "front">>
					<<link "Position sides behind body">>
						<<run State.setVar("$hairposition", "back")>>
						<<run Engine.show()>>
					<</link>>
				<<case "back">>
					<<link "Position sides in front of body">>
						<<run State.setVar("$hairposition", "front")>>
						<<run Engine.show()>>
					<</link>>
				<<default>>
					<<link "Position sides in front of body">>
						<<run State.setVar("$hairposition", "front")>>
						<<run Engine.show()>>
					<</link>>
			<</switch>>
			|
			<<switch $earsposition>>
				<<case "front">>
					<<link "Position hair in front of ears">>
						<<run State.setVar("$earsposition", "back")>>
						<<run Engine.show()>>
					<</link>>
				<<case "back">>
					<<link "Tuck hair behind ears">>
						<<run State.setVar("$earsposition", "front")>>
						<<run Engine.show()>>
					<</link>>
				<<default>>
					<<link "Tuck hair behind ears">>
						<<run State.setVar("$earsposition", "front")>>
						<<run Engine.show()>>
					<</link>>
			<</switch>>
			|
			<<switch $browsposition>>
				<<case "front">>
					<<link "Position brows behind hair">>
						<<run State.setVar("$browsposition", "back")>>
						<<run Engine.show()>>
					<</link>>
				<<case "back">>
					<<link "Position brows in front of hair">>
						<<run State.setVar("$browsposition", "front")>>
						<<run Engine.show()>>
					<</link>>
				<<default>>
					<<link "Position brows behind hair">>
						<<run State.setVar("$browsposition", "back")>>
						<<run Engine.show()>>
					<</link>>
			<</switch>>
			<br><br>
		</div>
	<<else>>
		<<if $hairtype is "default">>
			Currently, your fringe is in the <span class="gold">$fringetype</span> style. Your sides are left <span class="gold">natural</span> and are positioned <<if $hairposition is "front">>in front of<<else>>behind<</if>> your body.
		<<elseif $fringetype is "default">>
			Currently, your fringe is left <span class="gold">natural</span>. Your sides are in the <span class="gold">$hairtype</span> style and are positioned <<if $hairposition is "front">>in front of<<else>>behind<</if>> your body.
		<<else>>
			Currently, your fringe is in the <span class="gold">$fringetype</span> style. Your sides are in the <span class="gold">$hairtype</span> style and are positioned <<if $hairposition is "front">>in front of<<else>>behind<</if>> your body.
		<</if>>
			Your hair
			<<if $hairgelBottles is undefined>><<set $hairgelBottles to 0>><</if>>
			<<if $earsposition is "front">>
				 <span class="gold"> is tucked behind your ears</span>
			<<else>>
				 <span class="gold">hangs in front of your ears</span>
			<</if>>
			and is
			<<if $ruffledisable is "t">>
				<mouse class = "gold tooltip-small" style="border-bottom-color:white">
					fixed in place.
					<span class="black">Your hairstyle cannot be ruined. <br> <i class="red">Selecting a new hairstyle will re-enable hair ruffling. <<print ($hairgelBottles is 0 ? "Hair gel can be acquired at the shops." : "Hair gel will need to be re-applied.")>></i></span>
				</mouse>
			<<else>>
				<mouse class = "gold tooltip-small" style="border-bottom-color:white">
					not fixed in place.
					<span class="black">Certain situations may change your hair to a messier style. <br> <i class="teal">You can apply hair gel to disable hair ruffling.<<print ($hairgelBottles is 0 ? " Hair gel can be acquired at the shops." : "")>></i> </span>
				</mouse>
			<</if>>
		<div class="no-numberify">
			<<link [[Randomise your hairstyle|$passage]]>>
				<<set _hairType to Object.values(_hairTypeByName)>>
				<<set $hairtype to _hairType[random(0,_hairType.length - 1)]>>
				<<set _fringeType to Object.values(_fringeTypeByName)>>
				<<set $fringetype to _fringeType[random(0,_fringeType.length - 1)]>>
				<<set $hairposition to ["front","back"][random(0,1)]>>
			<</link>>
			|
			<<switch $hairposition>>
				<<case "front">>
					<<link "Position sides behind body">>
						<<run State.setVar("$hairposition", "back")>>
						<<run Engine.show()>>
					<</link>>
				<<case "back">>
					<<link "Position sides in front of body">>
						<<run State.setVar("$hairposition", "front")>>
						<<run Engine.show()>>
					<</link>>
				<<default>>
					<<link "Position sides in front of body">>
						<<run State.setVar("$hairposition", "front")>>
						<<run Engine.show()>>
					<</link>>
			<</switch>>
			|
			<<switch $earsposition>>
				<<case "front">>
					<<link "Position hair in front of ears">>
						<<run State.setVar("$earsposition", "back")>>
						<<run Engine.show()>>
					<</link>>
				<<case "back">>
					<<link "Tuck hair behind ears">>
						<<run State.setVar("$earsposition", "front")>>
						<<run Engine.show()>>
					<</link>>
				<<default>>
					<<link "Tuck hair behind ears">>
						<<run State.setVar("$earsposition", "front")>>
						<<run Engine.show()>>
					<</link>>
			<</switch>>
			|
			<<switch $browsposition>>
				<<case "front">>
					<<link "Position brows behind hair">>
						<<run State.setVar("$browsposition", "back")>>
						<<run Engine.show()>>
					<</link>>
				<<case "back">>
					<<link "Position brows in front of hair">>
						<<run State.setVar("$browsposition", "front")>>
						<<run Engine.show()>>
					<</link>>
				<<default>>
					<<link "Position brows behind hair">>
						<<run State.setVar("$browsposition", "back")>>
						<<run Engine.show()>>
					<</link>>
			<</switch>>
		<br><br>
		</div>
	<</if>>
<</widget>>

<<widget "mirrorHair">>
	<<link "Back">><<replace #mirror>><<mirrorMenu>><</replace>><<numberify "#passages > .passage">><<unset $mirrorMenu>><</link>>
	<<shopClothingFilterSettingsDefault>> /* Due to reusing the traits filtering */
	<br><br>
	<div id="hairDescription">
	<<hairDescription>>
	</div>

	<div id="hairgelLinks">
		<<hairgelLinks>>
	</div>

	<br>

	<<set _hairTypeByName to {}>>
	<<run setup.hairstyles.sides.forEach(style => {
		if (!V.shopClothingFilter.active || !V.shopClothingFilter.traits.length || style.type.find(type => V.shopClothingFilter.traits.includes(type))) T.hairTypeByName[style.name_cap] = style.variable;
	})>>

	<<set _fringeTypeByName to {}>>
	<<run setup.hairstyles.fringe.forEach(style => {
		if (!V.shopClothingFilter.active || !V.shopClothingFilter.traits.length || style.type.find(type => V.shopClothingFilter.traits.includes(type))) T.fringeTypeByName[style.name_cap] = style.variable;
	})>>

	<div id="hairContainer">
		<div id="hairContainerHeader" class="no-numberify">
			<<mirrorhairdisplayLinks "hair">>
		</div>
		<<mirrorhairdisplay "$hairtype" "sides">>
	</div>
	<br><br>
<</widget>>

<<widget "hairgelLinks">>
	<div class="no-numberify">
	<<link [[($showMannequins ? "Hide" : "Show") + " Mannequins"|$passage]]>><<set $showMannequins to 1 - ($showMannequins or 0)>><</link>>
	<mouse class="tooltip-small linkBlue">(?)<span>Disable preview images for hairstyles. <i class="red">Enabling mannequins may cause performance issues on some devices.</i></span></mouse>
	<<if $hairgelBottles isnot undefined and $hairgelBottles gte 1>>
		| <<hairdressericon "gel">>
		<<if $ruffledisable is "f">>
			<<link "Apply hair gel">><<replace #hairDescription>><<hairgelApply>><</replace>><<replace #hairgelDesc>><<hairgelDesc>><</replace>><<replace#hairgelLinks>><<hairgelLinks>><</replace>><</link>>
		|
		<</if>>
		<div id="hairgelDesc" style="display:inline"><<hairgelDesc>></div>
	<</if>>
	</div>
<</widget>>

<<widget "hairgelApply">>
	<<if $leftarm isnot "bound" and $rightarm isnot "bound">>
		<<set $ruffledisable to "t">>
		<<set $hairgelBottles += -1>>
	<</if>>
	<<hairDescription>>
	<<if $leftarm is "bound" and $rightarm is "bound">>
		<span class="red">Both of your arms are bound</span>, and you find it difficult to do anything about your hair this way.
		<br>
	<<else>>
		You squirt a hefty dollop of hair gel onto your hand and slick it through your hair. By the time you're finished, your hairstyle is securely in place, and the small bottle is empty. <span class="pink">If you decide to change up your hairstyle, you'll need to <<print ($hairgelBottles is 0) ? "acquire" : "apply">> more.</span>
		<hr>
	<</if>>
<</widget>>

<<widget "hairgelDesc">>
	You have <span class="gold">$hairgelBottles</span> <<print ($hairgelBottles is 1) ? "bottle" : "bottles">> of hair gel remaining.
<</widget>>

<<widget "mirrormodel">>
	<<set _modeloptions.skin_type = $skinColor.natural || "light">>
	<<set _modeloptions.freckles = $player.freckles == true and $makeup.concealer != 1>>
	<<set _modeloptions.left_eye = $makeup.eyelenses.left != 0 ? $makeup.eyelenses.left : $leftEyeColour>>
	<<set _modeloptions.right_eye = $makeup.eyelenses.right != 0 ? $makeup.eyelenses.right : $rightEyeColour>>
	<<set _modeloptions.mouth to 'neutral'>>
	<<set _modeloptions.hair_colour = $haircolour>>
	<<set _modeloptions.hair_fringe_colour = $hairfringecolour>>
	<<set _modeloptions.hair_fringe_colour_gradient = $hairFringeColourGradient>>
	<<set _modeloptions.hair_fringe_colour_style = $hairFringeColourStyle>>
	<<set _modeloptions.hair_colour_gradient = $hairColourGradient>>
	<<set _modeloptions.hair_colour_style = $hairColourStyle>>
	<<set _modeloptions.hair_sides_length to $hairlengthstage>>
	<<set _modeloptions.hair_sides_position to $hairposition>>
	<<set _modeloptions.hair_fringe_length to $fringelengthstage>>
<</widget>>

<<widget "mirrorhairdisplay">>
	<<if _hairCategory isnot _args[0]>>
		<<set _perPage to $showMannequins ? 14 : 100>>
		<<set _page to 1>>
	<</if>>
	<<set _hairCategory to _args[0]>>
	<<mirrorhairOptions _args[1]>>

	<div id="hairContainerElements">
		<<mirrorhairdisplayElements _hairOptions>>
	</div>
	<div id="hairContainerPages" class="no-numberify">
		<<mirrorhairControls _args[1]>>
	</div>
<</widget>>

<<widget "mirrorhairControls">>
	<<if $showMannequins>>
		<div id="hairContainerFooter">
			<div class="tab">
			<<if _page gt 1>>
				<<button '<span class="fa-icon fa-left"></span> Previous'>>
					<<if _page gt 1>><<set _page-->><</if>>
					<<mirrorhairOptions _args[0]>>
					<<replace "#hairContainerElements">><<mirrorhairdisplayElements _hairOptions>><</replace>>
					<<replace "#hairContainerPages">><<mirrorhairControls _args[0]>><</replace>>
				<</button>>
			<</if>>
			</div>
			<div class="tab">
			<<if _page lt _pageMax>>
				<<button 'Next <span class="fa-icon fa-right"></span>'>>
					<<if _page lt _pageMax>><<set _page++>><</if>>
					<<mirrorhairOptions _args[0]>>
					<<replace "#hairContainerElements">><<mirrorhairdisplayElements _hairOptions>><</replace>>
					<<replace "#hairContainerPages">><<mirrorhairControls _args[0]>><</replace>>
				<</button>>
			<</if>>
			</div>
			<div class="tab">
				<div id="buttonpage">
					<<button '_page/_pageMax'>>
					<</button>>
				</div>
			</div>
		</div>
	<</if>>
<</widget>>

<<widget "mirrorhairTraits">>
	<div id="hairContainerFilter">
		<div class="tab">
				<<button "<span class='fa-icon fa-check'></span> Apply">>
					<<set $shopClothingFilter.active = true>>
					<<run updateMoment()>>
				<</button>>
				<<button "<span class='fa-icon fa-reset'></span> Reset Filters">>
					<<shopClothingFilterReset>>
					<<replace "#hairContainerTraits">><<mirrorHairTraitList>><</replace>>
					<<run updateMoment()>>
				<</button>>
				<<button "<span class='fa-icon fa-selected'></span> Select/Deselect All">>
					<<run toggleAllHairTraitsFilter()>>
				<</button>>
		</div>
    </div>
<</widget>>

<<widget "mirrorhairOptions">>
	<<set _hairOptions to {}>>
	<<run setup.hairstyles[_args[0]].forEach(style => {
		if (!V.shopClothingFilter.active || !V.shopClothingFilter.traits.length || style.type.find(type => V.shopClothingFilter.traits.includes(type))) T.hairOptions[style.name_cap] = style.variable;
	})>>
	<<set _pageMax to Math.ceil(Object.keys(_hairOptions).length / _perPage)>>

	<<run Object.keys(_hairOptions).forEach((key, index) => {
    if (!between(index, T.perPage * (T.page - 1), (T.perPage * T.page) - 1)) {
            delete T.hairOptions[key];
        }
    })>>
<</widget>>

<<widget "mirrorhairdisplayLinks">>
	<div class="tab">
		<span @class="_args[0] is 'hair' ? 'tab-selected' : 'tab'">
			<<button "Sides">>
				<<replace "#hairContainer">>
					<div id="hairContainerHeader" class="no-numberify">
						<<mirrorhairdisplayLinks "hair">>
					</div>
					<<mirrorhairdisplay "$hairtype" "sides">>
				<</replace>>
			<</button>>
		</span>
	</div>
	<div class="tab">
		<span @class="_args[0] is 'fringe' ? 'tab-selected' : ''">
			<<button "Fringe">>
				<<replace "#hairContainer">>
					<div id="hairContainerHeader" class="no-numberify">
						<<mirrorhairdisplayLinks "fringe">>
					</div>
					<<mirrorhairdisplay "$fringetype" "fringe">>
				<</replace>>
			<</button>>
		</span>
	</div>
	<div class="tab">
		<span @class="_args[0] is 'style' ? 'tab-selected' : ''">
			<<button "Save/Load">>
				<<replace "#hairContainer">>
					<div id="hairContainerHeader" class="no-numberify">
						<<mirrorhairdisplayLinks "style">>
					</div>
					<<mirrorhairdisplaySave>>
				<</replace>>
			<</button>>
			<div id="hairContainerSave" class="no-numberify">
			</div>
		</span>
	</div>
	<div class="tab">
		<span @class="_args[0] is 'filter' ? 'tab-selected' : ''">
			<<button "Filters">>
				<<replace "#hairContainer">>
					<div id="hairContainerHeader" class="no-numberify">
						<<mirrorhairdisplayLinks "filter">>
					</div>
					<<mirrorhairdisplayFilter>>
				<</replace>>
			<</button>>
		</span>
	</div>
<</widget>>

<<widget "mirrorhairdisplayElements">>
	<div id="hairGridSides" class="no-numberify hairGrid">
		<<for _label, _hairName range _args[0]>>
			<<capture _hairCategory, _hairName>>
				<div @id="'hairGrid-' + _hairCategory.replace('$','') + '-' + _hairName.replace(/ /g,'')" @class="'gridItem' + (_hairName is V[_hairCategory.replace('$','')] ? ' selectedHair' : '')" @onclick="`wikifier('mirrorhairdisplayClick', '${T.hairCategory.replace('$','')}', '${T.hairName.replace(/ /g,'_')}');`">
					<<if $options.images is 1 and $sidebarRenderer isnot "img" and $showMannequins is 1>>
						<<selectmodel "main">>
						<<mirrormodel>>
						<<if _hairCategory is "$hairtype">>
							<<set _modeloptions.hair_sides_type to _hairName>>
							<<set _modeloptions.hair_fringe_type to $fringetype>>
						<<else>>
							<<set _modeloptions.hair_fringe_type to _hairName>>
							<<set _modeloptions.hair_sides_type to $hairtype>>
						<</if>>
						<<set _modeloptions.ears_position to $earsposition>>
						<<rendermodel "hairstyleMannequin">>
						<br>
					<</if>>
					<<print _label>>
				</div>
			<</capture>>
		<</for>>
	</div>
<</widget>>

<<widget "mirrorhairdisplayClick">>
	<<if _args[0] and _args[1]>>
		<<if Object.values(_hairOptions).includes(V[_args[0]])>>
			<<set _id to "#hairGrid-" + _args[0] + "-" + V[_args[0]].replace(/ /g,"")>>
			<<removeclass _id "selectedHair">>
		<</if>>
		<<set V[_args[0]] to _args[1].replace(/_/g," ")>>
		<<set _id2 to "#hairGrid-" + _args[0] + "-" + _args[1].replace(/_/g,"")>>
		<<set $ruffledisable to "f">>
		<<addclass _id2 "selectedHair">>
		<<updatesidebarimg>>
		<<replace #hairDescription>><<hairDescription>><</replace>>
		<<replace #hairgelLinks>><<hairgelLinks>><</replace>>
	<</if>>
<</widget>>

<<widget "mirrorhairdisplaySave">>
	<div id="hairContainerHairstyle">
		<<mirrorHairSaveOptions>>
	</div>
	<div id="hairContainerSave" class="no-numberify">
		<<mirrorHairSave>>
	</div>
<</widget>>

<<widget "mirrorHairSaveOptions">>
		<<if !$savedHairStyles>>
			<<set $savedHairStyles to {
				Default: { hairtype:$hairtype, fringetype:$fringetype, hairposition:$hairposition }
			}>>
		<</if>>
		<div class="no-numberify saveHair">
		<span class="bold">Select a hairstyle:</span>
			<hr style="border:none;margin:.25em 0">
			<<set _savedHairStylesKeys to Object.keys($savedHairStyles)>>
			<<if _savedHairStylesKeys.length gt 0>>
				<<listbox '_selectedSavedHairStyle'>>
					<<optionsfrom _savedHairStylesKeys>>
				<</listbox>>
			<</if>>
			<br>
		</div>
		<div class="no-numberify saveHair">
			<span class="bold" style="margin:.25em 0">Create a new hairstyle:</span>
			<hr style="border:none;margin:.25em 0">
			<label>Name: <<textbox "_hairStyleName" "">></label>
			<mouse class="tooltip linkBlue"> (?)<span>Saves your current hairstyle, so it may be worn later. Duplicate names will overwrite existing styles.</span></mouse>
			<span id="textbox-error"></span>
		</div>
<</widget>>


<<widget "mirrorhairdisplayFilter">>
	<div id="hairContainerTraits" class="no-numberify">
		<<mirrorHairTraitList>>
	</div>
	<div id="hairContainerFilter">
		<<mirrorhairTraits>>
	</div>
<</widget>>

<<widget "mirrorHairTraitList">>
	<<set _shopLocation to "mirrorhair">>
	<div class="hairGridTraits">
		<div class="traitCategory">
			<<set _textureTraits to ["curly", "sleek", "wavy", "textured"]>>
			<span class="gold" style="padding-left:5px">Texture:</span>
				<<for _trait range _textureTraits.sort()>>
					<<silently>><< _trait>><</silently>>
					<div class="filters-trait-row">
						<label>
							<<set _checked = $shopClothingFilter.traits.includes(_trait) ? 'checked="checked"' : ''>>
							<<clothingtrait _trait 'display_normal'>>
							<<print '<input type="checkbox" @id="_trait" @value="_trait" ' + _checked + ' onclick="window.shopClothingFilterToggleTrait(this.value)">'>>
							<<if $noTraitDescription>>
								<<print _clothesTrait>>
							<<else>>
								<mouse class = "tooltip-small">
									<<print _clothesTrait>>
									<span class="black"><<print _clothesDesc>></span>
								</mouse>
							<</if>>
						</label>
					</div>
				<</for>>
		</div>
		<div class="traitCategory">
			<span class="gold" style="padding-left:5px">Style:</span>
			<<set _styleTraits to ["braids", "buns", "pigtails", "ponytail"]>>
				<<for _trait range _styleTraits.sort()>>
					<<silently>><< _trait>><</silently>>
					<div class="filters-trait-row">
						<label>
							<<set _checked = $shopClothingFilter.traits.includes(_trait) ? 'checked="checked"' : ''>>
							<<clothingtrait _trait 'display_normal'>>
							<<print '<input type="checkbox" @id="_trait" @value="_trait" ' + _checked + ' onclick="window.shopClothingFilterToggleTrait(this.value)">'>>
							<<if $noTraitDescription>>
								<<print _clothesTrait>>
							<<else>>
								<mouse class = "tooltip-small">
									<<print _clothesTrait>>
									<span class="black"><<print _clothesDesc>></span>
								</mouse>
							<</if>>
						</label>
					</div>
				<</for>>
		</div>
		<div class="traitCategory">
			<span class="gold" style="padding-left:5px">Other</span>
			<<set _otherTraits to ["loose","short"]>>
				<<for _trait range _otherTraits.sort()>>
					<<silently>><< _trait>><</silently>>
					<div class="filters-trait-row">
						<label>
							<<set _checked = $shopClothingFilter.traits.includes(_trait) ? 'checked="checked"' : ''>>
							<<clothingtrait _trait 'display_normal'>>
							<<print '<input type="checkbox" @id="_trait" @value="_trait" ' + _checked + ' onclick="window.shopClothingFilterToggleTrait(this.value)">'>>
							<<if $noTraitDescription>>
								<<print _clothesTrait>>
							<<else>>
								<mouse class = "tooltip-small">
									<<print _clothesTrait>>
									<span class="black"><<print _clothesDesc>></span>
								</mouse>
							<</if>>
						</label>
					</div>
				<</for>>
		</div>
	</div>
<</widget>>

<<widget "mirrorHairSave">>
	<div class="hairContainerSave">
	<<if _savedHairStylesKeys.length gt 0>>
	<div class="tab">
		<<button '<span class="fa-icon fa-check"></span> Wear'>>
			<<set $hairtype to $savedHairStyles[_selectedSavedHairStyle].hairtype>>
			<<set $fringetype to $savedHairStyles[_selectedSavedHairStyle].fringetype>>
			<<set $hairposition to $savedHairStyles[_selectedSavedHairStyle].hairposition>>
			<<set $ruffledisable to "f">>
			<<updatesidebarimg>>
		<</button>>
		<<button '<span class="fa-icon fa-overwrite"></span> Overwrite'>>
			<<set $savedHairStyles[_selectedSavedHairStyle].hairtype to $hairtype>>
			<<set $savedHairStyles[_selectedSavedHairStyle].fringetype to $fringetype>>
			<<set $savedHairStyles[_selectedSavedHairStyle].hairposition to $hairposition>>
			<<updatesidebarimg>>
		<</button>>
		<<button '<span class="fa-icon fa-delete"></span> Delete'>>
			<<if _selectedSavedHairStyle isnot "Default">>
				<<run $outfit.forEach((o) => {
					if(o.hairStyle === T.selectedSavedHairStyle){
						o.hairStyle = undefined;
					}
				})>>
				<<run delete $savedHairStyles[_selectedSavedHairStyle]>>
				<<updatesidebarimg>>
				<<replace #hairContainerHairstyle>><<mirrorHairSaveOptions>><</replace>>
			<</if>>
		<</button>>
		<<button '<span class="fa-icon fa-save"></span> Save'>>
			<<if _hairStyleName is "">>
				<<replace "#textbox-error">><br> <span class="red">Please enter a name.</span><</replace>>
			<<else>>
				<<replace "#textbox-error">><</replace>>
				<<set _hairStyleName to _hairStyleName.replace(/[^a-zA-Z\u4e00-\u9fa50-9_-]+/g,"").substring(0,30)>>
				<<set $savedHairStyles[_hairStyleName] to { hairtype:$hairtype, fringetype:$fringetype, hairposition:$hairposition }>>
				<<replace #hairContainerHairstyle>><<mirrorHairSaveOptions>><</replace>>
			<</if>>
		<</button>>
	</div>
	<<else>>
	<div class="tab">
		<<button '<span class="fa-icon fa-save"></span> Save'>>
			<<if _hairStyleName is "">>
				<<replace "#textbox-error">><br> <span class="red">Please enter a name.</span><</replace>>
			<<else>>
				<<replace "#textbox-error">><</replace>>
				<<set _hairStyleName to _hairStyleName.replace(/[^a-zA-Z\u4e00-\u9fa50-9_-]+/g,"").substring(0,30)>>
				<<set $savedHairStyles[_hairStyleName] to { hairtype:$hairtype, fringetype:$fringetype, hairposition:$hairposition }>>
				<<replace #hairContainerHairstyle>><<mirrorHairSaveOptions>><</replace>>
			<</if>>
		<</button>>
	</div>
	<</if>>
	</div>
<</widget>>


<<widget "mirrorMakeupPart">>
	<<set _itemType = _args[0]>>
	<<set _singular = _args[1]>>
	<<set _plural = _args[2]>>
	<<set _cssClass = _args[3]>>

	<<set _items = $makeup.owned[_itemType].filter(x => x.count > 0)>>
	<<if $makeup.owned[_itemType].length == 0>>
		You don't own any _plural.
	<<elseif _items.length == 0>>
		You ran out of _plural.
		<br>
	<</if>>
	<<if _items.length != 0 or $makeup[_itemType] != 0>>
		Apply _singular:<br>
		<<if $makeup[_itemType] != 0>>
			<<capture _itemType>>
			<span class="no-numberify">
			<<link "Remove">>

			<<if _itemType is "eyelenses">>
				<!-- A safety check for $makeup.eyelenses -->
				<<set $makeup.eyelenses to { left: 0, right: 0 }>>
			<<else>>
				<<set $makeup[_itemType] to 0>>
			<</if>>
			<<if _itemType == 'mascara'>>
				<<set $makeup.mascara_running = 0>>
			<</if>>
			<<run Engine.show()>>

			<</link>></span>
			<<print " | ">>
			<</capture>>
		<</if>>
		<<for _i, _item range _items>>
			<<capture _item, _itemType>>
				<span class="capitalize no-numberify">
				<<if $makeup[_itemType] == _item.colour>>
					<<print setup.colourName(_item.colour)>>
				<<else>>
					<<link `setup.colourName(_item.colour)`>>
						<<set $makeup[_itemType] = _item.colour>>
						<<set _item.count -= 1>>
						<<if _itemType == 'mascara'>>
							<<set $makeup.mascara_running = 0>>
						<</if>>
						<<run Engine.show()>>
					<</link>>
				<</if>>
				</span>
				<span @class="_cssClass+'-'+_item.colour.replace(/ /g, '-')"><span class="colour-sample"></span></span>
				<<print "×"+_item.count+" | ">>
			<</capture>>
		<</for>>
		<br>
	<</if>>
<</widget>>

<<widget "mirrorMakeup">>
	<<link "Back">><<replace #mirror>><<mirrorMenu>><</replace>><<numberify "#passages > .passage">><<unset $mirrorMenu>><</link>>
	<br><br>
	__Makeup__
	<br>
	<<set _makeupNames to ["lipstick","eyeshadow","mascara","browscolour","eyelenses"]>>
	<<set _makeupData to ["lipstick","eyeshadow","mascara","hairdye","eyelenses"]>>
	<<if $mirror_eyebrow_dye is true>>
		<br>
		<<unset $mirror_eyebrow_dye>>
		You open up the box with $browsDyeOption dye and prepare the mixture.
		<br>
		Using a small brush you carefully apply the dye to your eyebrows.
		<br>
		You wait several minutes for the dye to set and hope you didn't mess up anything.
		<br><br><br>
		<<set $makeup.owned.hairdye.find(x => x.colour == $browsDyeOption).count -= 1>>
		<<pass 10>><<set $makeup.browscolour = $browsDyeOption>><<unset $browsDyeOption>>
	<</if>>


	<<link [[Remove all|$passage]]>>
		<<set $makeup.lipstick to 0>>
		<<set $makeup.eyeshadow to 0>>
		<<set $makeup.mascara to 0>>
		<<set $makeup.eyelenses to { left: 0, right: 0 }>>
		<<set $makeup.mascara_running to 0>>
	<</link>> |
	<<link [[Randomise|$passage]]>>
		<<for _i to 0; _i lt _makeupNames.length; _i++>>
			<<set _ownedMakeup to $makeup.owned[_makeupData[_i]]>>
			<<if _makeupNames[_i] is "eyelenses">>
				<<set _rng to random(0, _ownedMakeup.length)>>
				<<set _lens to _rng is _ownedMakeup.length ? 0 : _ownedMakeup[_rng]>>
				<<set $makeup.eyelenses to { left: _lens, right: _lens }>>
			<<else>>
				<<set _rngset to []>>
				<<for _label, _value range _ownedMakeup>>
					<<if _value.count gt 0>>
						<<run _rngset.push(_label)>>
					<</if>>
				<</for>>
				<<run _rngset.push(_ownedMakeup.length)>>
				<<set _rng to _rngset[random(0, _rngset.length - 1)]>>
				<<if _rng is _ownedMakeup.length and _makeupNames[_i] is "browscolour">>
					/*Do Nothing*/
				<<elseif _rng is _ownedMakeup.length>>
					<<set $makeup[_makeupNames[_i]] to 0>>
				<<elseif _ownedMakeup[_rng].count gt 0 and $makeup[_makeupNames[_i]] isnot _ownedMakeup[_rng].colour>>
					<<set $makeup[_makeupNames[_i]] to _ownedMakeup[_rng].colour>>
					<<set _ownedMakeup[_rng].count-->>
				<</if>>
			<</if>>
		<</for>>
	<</link>>
	<br>
	<<if $makeup.presets is undefined>>
		<<set $makeup.presets to {}>>
	<</if>>
	<<if Object.keys($makeup.presets).length gt 0>>
		Presets:
		<<for _label, _value range $makeup.presets>>
			<<capture _label>>
				<<link _label>>
					<<replace "#makeupPresets">>
						<<makeupPresets _label>>
					<</replace>>
				<</link>> |
			<</capture>>
		<</for>>
		<div id="makeupPresets"></div>
	<</if>>
	<br>
	<<mirrorMakeupPart "lipstick" "lipstick" "lipsticks" "lipstick">><br>
	<<mirrorMakeupPart "eyeshadow" "eyeshadow" "eyeshadows" "eyeshadow">><br>
	<<mirrorMakeupPart "mascara" "mascara" "mascaras" "mascara">><br>

	<<if !$simpleMirror>>
		/* CONTACT LENSES */
		<<if $makeup.owned.eyelenses.length == 0 and $makeup.owned.custom_eyelenses.length == 0>>
			You don't own any contact lenses.
			<br>
		<<else>>
			<<set _contact_eye_selected to "Both">>
			Wear contact lenses:<br> /* NON CUSTOMISED ONES */
			Select eye : <<listbox "_contact_eye_selected" autoselect>>
				<<option "Both">>
				<<option "Left eye">>
				<<option "Right eye">>
			<</listbox>><br>
			<<if $makeup.eyelenses.left != 0 || $makeup.eyelenses.right != 0>>
				<span class="no-numberify">
				<<link "None">>
				<<set $makeup.eyelenses = { left:0, right:0 }>>
				<<run Engine.show()>>
				<</link>></span>
				<<print " | ">>
			<</if>>
			<<for _i, _colour range $makeup.owned.eyelenses>>
				<<capture _colour>>
					<span class="capitalize no-numberify">
					<<link _colour>>
						<<if _contact_eye_selected == "Both">>
							<<set $makeup.eyelenses = { left:_colour, right:_colour }>>
						<<elseif _contact_eye_selected == "Left eye">>
							<<set $makeup.eyelenses.left = _colour>>
						<<elseif _contact_eye_selected == "Right eye">>
							<<set $makeup.eyelenses.right = _colour>>
						<</if>>
						<<run Engine.show()>>
					<</link>></span>
						<span @class="'eye-'+_colour.replace(/ /g, '-')"><span class="colour-sample bgcolour-eyes left-iris"></span></span>
					<<print " | ">>
				<</capture>>
			<</for>>
			<br>
					Custom contact lenses:<br> /* CUSTOMISED ONES */
			<<set _custom_eye_selected to "Both">>
			Select eye : <<listbox "_custom_eye_selected" autoselect>>
				<<option "Both">>
				<<option "Left eye">>
				<<option "Right eye">>
			<</listbox>><br>
			<<if $makeup.eyelenses.left != 0 || $makeup.eyelenses.right != 0>>
				<span class="no-numberify">
				<<link "None">>
				<<set $makeup.eyelenses = { left:0, right:0 }>>
				<<run Engine.show()>>
				<</link>></span>
				<<print " | ">>
			<</if>>
			<<for _i = 0; _i < $makeup.owned.custom_eyelenses.length; _i++>>
				<<run _colour = $makeup.owned.custom_eyelenses[_i]>>
				<<for _e = 0; _e < $custom_eyecolours.length; _e++>>
					<<if $custom_eyecolours[_e].variable == $makeup.owned.custom_eyelenses[_i]>>
						<<set _background_colour to clone($custom_eyecolours[_e].canvasfilter.blend)>>
					<</if>>
				<</for>>
				<<capture _colour _background_colour>>
					<span class="capitalize no-numberify">
					<<set _colour_name_with_space = window.colorNameTranslate(_colour, "spaced name")>>
					<<link _colour_name_with_space>>
						<<if _custom_eye_selected == "Both">>
							<<set $makeup.eyelenses = { left:_colour, right:_colour }>>
						<<elseif _custom_eye_selected == "Left eye">>
							<<set $makeup.eyelenses.left = _colour>>
						<<elseif _custom_eye_selected == "Right eye">>
							<<set $makeup.eyelenses.right = _colour>>
						<</if>>
						<<run Engine.show()>>
					<</link>></span>
					<span class="eye-custom"><span @style="'background:'+_background_colour" class="colour-sample"></span></span>
					<<print " | ">>
				<</capture>>
			<</for>>
			<br><br>
		<</if>>

		/* DYEING EYEBROWS */
		<<browsDyeReset>>
		Dye your eyebrows:<br>
		<<set _dyes = $makeup.owned.hairdye.filter(x => x.count > 0)>>
		<<if _dyes.length == 0>>
			You have no dyes.
		<<else>>
			<<set _browsDyeOptions to {"Don't dye":"noChange"}>>
			<<for _i to 0; _i lt _dyes.length; _i++>>
				<<if $makeup.browscolour is _dyes[_i].colour or $naturalhaircolour is _dyes[_i].colour>>
					<<continue>>
				<</if>>
				<<set _displayName = _dyes[_i].colour.charAt(0).toUpperCase() + _dyes[_i].colour.slice(1) + " ×" + _dyes[_i].count + "">>
				<<set _browsDyeOptions[_displayName] to _dyes[_i].colour>>
			<</for>>
			<<listbox "$browsDyeOption" autoselect>>
				<<optionsfrom _browsDyeOptions>>
			<</listbox>>
			<<browsColourPreview>>
		<</if>>
		<<if $makeup.browscolour != 0>>
			<br>
			You can visit a hairdresser to restore your natural brows colour.
		<</if>>
		<br><br>
	<</if>>

	/* CONCEALER */
	<<if $player.freckles == true>>
		<<if $makeup.concealer == 0>>
			<span class="capitalize no-numberify">
			<<link "Apply concealer to hide freckles">>
			<<set $makeup.concealer = 1>>
			<<run Engine.show()>>
			<</link>>
			</span>
		<<else>>
			<span class="capitalize no-numberify">
			<<link "Remove concealer">>
			<<set $makeup.concealer = 0>>
			<<run Engine.show()>>
			<</link>>
			</span>
		<</if>>
		<br><br>
	<</if>>

	__New Makeup Preset__ - Saves the makeup you current have on
	<br>
	<<textbox "_newPresetName" "">>
	<<link [[Save preset|$passage]]>>
		<<set _newPresetName to _newPresetName.replace(/[^a-zA-Z\u4e00-\u9fa5 0-9]+/g,"")>>
		<<set $makeup.presets[_newPresetName] to {
			lipstick:clone($makeup.lipstick),
			eyeshadow:clone($makeup.eyeshadow),
			mascara:clone($makeup.mascara),
			browscolour:clone($makeup.browscolour),
			eyelenses:clone($makeup.eyelenses),
		}>>
	<</link>>
<</widget>>

<<widget "makeupPresets">>
	<<set _presetChosen to $makeup.presets[_args[0]]>>
	Preset: <<print _args[0]>>
	<br>
	<<for $_label, $_value range _presetChosen>>
		<<switch $_label>>
			<<case "browscolour">>
				Eyebrows dye: <<makeupPresetsItem "hairdye" $_value>>
			<<case "lipstick">>
				Lipstick: <<makeupPresetsItem $_label $_value>>
			<<case "eyeshadow">>
				Eye Shadow: <<makeupPresetsItem $_label $_value>>
			<<case "mascara">>
				Mascara: <<makeupPresetsItem $_label $_value>>
			<<case "eyelenses">>
				Contact Lenses: <<makeupPresetsItem $_label $_value>>
		<</switch>>
		<br>
	<</for>>
	<br>
	<<link [[Apply preset makeup|$passage]]>>
		<<for $_makeupName range _makeupNames>>
			<<set _preset to _presetChosen[$_makeupName]>>
			<<if $_makeupName is "eyelenses">>
				<<if _preset.left is 0 and _preset.right is 0>>
					<<set $makeup.eyelenses to { left:0, right:0 }>>
				<<elseif $makeup.owned.eyelenses.includes(_preset.left) and $makeup.owned.eyelenses.includes(_preset.right)>>
					<<set $makeup.eyelenses to _preset>>
				<<elseif $makeup.owned.custom_eyelenses.includes(_preset.left) and $makeup.owned.custom_eyelenses.includes(_preset.right)>>
					<<set $makeup.eyelenses to _preset>>
				<</if>>
			<<elseif _preset is 0 and $_makeupName is "hairdye">>
				/*Do Nothing*/
			<<elseif _preset is 0>>
				<<set $makeup[$_makeupName] to 0>>
			<<else>>
				<<set $_makeupName2 to ($_makeupName is "browscolour" ? "hairdye" : $_makeupName)>>
				<<set $_target to $makeup.owned[$_makeupName2].find(invMakeup => invMakeup.colour is _preset and invMakeup.colour isnot $makeup[$_makeupName] and invMakeup.count gt 0)>>
				<<if $_target>>
					<<set $makeup[$_makeupName] to clone($_target.colour)>>
					<<set $_target.count-->>
				<</if>>
			<</if>>
		<</for>>
	<</link>> |
	<<link [[Delete preset|$passage]]>>
		<<run delete $makeup.presets[_args[0]]>>
	<</link>>
<</widget>>

<<widget "makeupPresetsItem">>
	<<if _args[0] isnot undefined and _args[1] isnot undefined>>
		<<if _args[1] is 0 and _args[0] is "hairdye">>
			<span class="red">Unable to remove.</span>
		<<elseif _args[1] is 0>>
			<span class="green">Remove.</span>
		<<else>>
			<<if _args[0] is "eyelenses">>
				<<if _args[1].left == 0 && _args[1].right == 0>>
					<span class="green">Remove</span>
				<<elseif _args[1].left == _args[1].right>>
					<span class="green"><<print _args[1].left>> (Owned).</span>
				<<else>>
					<span class="green"><<print _args[1].left + ", " + _args[1].right>> (Owned).</span>
				<</if>>
			<<else>>
				<<for $_i to 0; $_i lt $makeup.owned[_args[0]].length; $_i++>>
					<<if $makeup.owned[_args[0]][$_i].colour is _args[1]>>
						<<if $makeup.owned[_args[0]][$_i].count gt 0>>
							<span class="green"><<print _args[1]>> (<<print $makeup.owned[_args[0]][$_i].count>>).</span>
						<<else>>
							<span class="red"><<print _args[1]>> (0).</span>
						<</if>>
						<<break>>
					<</if>>
				<</for>>
			<</if>>
		<</if>>
	<</if>>
<</widget>>

<<widget "browsColourPreview">>
	<span id="browsColourPreview">
	<<if $browsDyeOption isnot "noChange">>
		<span @class="'hair-' + $browsDyeOption.replace(/ /g, '-')">
			<span class="colour-sample bgcolour-hair colour-hair"></span>
		</span>
		<br><<link [[Dye eyebrows (0:15)|$passage]]>><<set $mirror_eyebrow_dye to true>><<pass 15>><</link>>
	<</if>>
	</span>
<</widget>>

<<widget "mirrorTransformation">>
	<<link "Back">><<replace #mirror>><<mirrorMenu>><</replace>><<numberify "#passages > .passage">><<unset $mirrorMenu>><</link>>
	<br><br>
	Hiding parts of your Inner Self will slowly increase your Trauma over time (excludes pubes and pits).
	If your Trauma gets too high, you will be unable to hide.
	<br><br>

	<<set _angel to $transformationParts.angel>>
	<<set _fallen to $transformationParts.fallenAngel>>
	<<set _demon to $transformationParts.demon>>
	<<set _cat to $transformationParts.cat>>
	<<set _cow to $transformationParts.cow>>
	<<set _wolf to $transformationParts.wolf>>
	<<set _bird to $transformationParts.bird>>
	<<set _fox to $transformationParts.fox>>
	<<set _traits to $transformationParts.traits>>

	<div id='transformations-menu' class='grid col-2'>
		<div id='transformations-list' class='list'>
			<div class='tf-angel'>
				<<if $angel gt 1>>
					__Angel__
					<br>
					<<if _angel.halo isnot "disabled">>
						<div class='tf-part-item'>
							Halo:
							<<listbox "_angel.halo" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
								<<option "Traditional" "traditional">>
							<</listbox>>
						</div>
						<br>
					<</if>>
					<<if _angel.wings isnot "disabled">>
						<div class='tf-part-item'>
							Wings:
							<<listbox "_angel.wings" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
						<br>
					<</if>>
					<br>
				<</if>>
			</div>
			<div class='tf-fallen'>
				<<if $fallenangel gt 1>>
					__Fallen Angel__
					<br>
					<<if _fallen.halo isnot "disabled">>
						<div class='tf-part-item'>
							Halo:
							<<listbox "_fallen.halo" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
								<<option "Traditional" "traditional">>
							<</listbox>>
						</div>
						<br>
					<</if>>
					<<if _fallen.wings isnot "disabled">>
						<div class='tf-part-item'>
							Wings:
							<<if $fallenangel gte 4>>
								<<listbox "_fallen.wings" autoselect>>
									<<option "Hide" "hidden">>
									<<option "Default" "default">>
									<<option "Feathered" "fallenplus">>
								<</listbox>>
							<<else>>
								<<listbox "_fallen.wings" autoselect>>
									<<option "Hide" "hidden">>
									<<option "Default" "default">>
								<</listbox>>
							<</if>>
						</div>
					<</if>>
					<br>
				<</if>>
			</div>
			<div class='tf-demon'>
				<<if $demon gt 1>>
					__Demon__
					<br>
					<<if _demon.horns isnot "disabled">>
						<div class='tf-part-item'>
							Horns:
							<<listbox "_demon.horns" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
								<<option "Classic" "classic">>
								<<option "Succubus" "succubus">>
							<</listbox>>
							<<gencolourselector "_demon.horns_colour">>
						</div>
					<</if>>
					<<if _demon.wings isnot "disabled">>
						<div class='tf-part-item'>
							Wings:
							<<listbox "_demon.wings" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
								<<option "Succubus" "succubus">>
							<</listbox>>
							<<gencolourselector "_demon.wings_colour">>
						</div>
					<</if>>
					<<if _demon.tail isnot "disabled">>
						<div class='tf-part-item'>
							Tail:
							<<listbox "_demon.tail" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
								<<option "Classic" "classic">>
								<<option "Succubus" "succubus">>
							<</listbox>>
							<<gencolourselector "_demon.tail_colour">>
						</div>
					<</if>>
					<<if $demon gte 4>>
						<div class='tf-part-item'>
							<<if $exhibitionism gte 95>>
								Flaunting when exposed:
								<<listbox "_traits.flaunting" autoselect>>
									<<option "Hide" "hidden">>
									<<option "Default" "default">>
								<</listbox>>
								<<ind>>
							<<else>>
								<span class="black">Flaunting (requires higher exhibitionism):</span>
								<<listbox "_traits.flaunting" autoselect>>
									<<option "Hide" "hidden">>
								<</listbox>>
								<<ind>>
							<</if>>
						</div>
					<</if>>
					<br>
				<</if>>
			</div>
			<div class='tf-cat'>
				<<if $cat gt 1>>
					__Cat__
					<br>
					<<if _cat.ears isnot "disabled">>
						<div class='tf-part-item'>
							Ears:
							<<listbox "_cat.ears" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<<if _cat.tail isnot "disabled">>
						<div class='tf-part-item'>
							Tail:
							<<listbox "_cat.tail" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<<if _cat.heterochromia isnot "disabled">>
						<div class='tf-part-item'>
							Heterochromia:
							<<listbox "_cat.heterochromia" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<br>
				<</if>>
			</div>
			<div class='tf-cow'>
				<<if $cow gt 1>>
					__Cow__
					<br>
					<<if _cow.horns isnot "disabled">>
						<div class='tf-part-item'>
							Horns:
							<<listbox "_cow.horns" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<<if _cow.ears isnot "disabled">>
						<div class='tf-part-item'>
							Ears:
							<<listbox "_cow.ears" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
								<<option "Spotted black" "spotted black">>
								<<option "Spotted brown" "spotted brown">>
							<</listbox>>
						</div>
					<</if>>
					<<if _cow.tail isnot "disabled">>
						<div class='tf-part-item'>
							Tail:
							<<listbox "_cow.tail" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
								<<option "Black" "black">>
							<</listbox>>
						</div>
					<</if>>
					<br>
				<</if>>
			</div>
			<div class='tf-wolf'>
				<<if $wolfgirl gt 1>>
					__Wolf__
					<br>
					<<if _wolf.ears isnot "disabled">>
						<div class='tf-part-item'>
							Ears:
							<<listbox "_wolf.ears" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
								<<option "Feral" "feral">>
							<</listbox>>
						</div>
					<</if>>
					<<if _wolf.tail isnot "disabled">>
						<div class='tf-part-item'>
							Tail:
							<<listbox "_wolf.tail" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
								<<option "Feral" "feral">>
							<</listbox>>
						</div>
					<</if>>
					<br>
					<<if _wolf.cheeks isnot "disabled">>
						<div class='tf-part-item'>
							Cheeks:
							<<listbox "_wolf.cheeks" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Feral" "feral">>
							<</listbox>>
						</div>
					<</if>>
					<<if _wolf.pubes isnot "disabled" and $pbdisable is "f">>
						<div class='tf-part-item'>
							Pubes:
							<<listbox "_wolf.pubes" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<br>
					<<if _wolf.pits isnot "disabled" and $pbdisable is "f">>
						<div class='tf-part-item'>
							Pits:
							<<listbox "_wolf.pits" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<br>
				<</if>>
			</div>
			<div class='tf-bird'>
				<<if $harpy gt 1>>
					__Bird__
					<br>
					<<if _bird.eyes isnot "disabled">>
						<div class='tf-part-item'>
							eyes:
							<<listbox "_bird.eyes" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<<if _bird.malar isnot "disabled">>
						<div class='tf-part-item'>
							Malar Stripes:
							<<listbox "_bird.malar" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<<if _bird.plumage isnot "disabled">>
						<div class='tf-part-item'>
							Plumage:
							<<listbox "_bird.plumage" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<<if _bird.tail isnot "disabled">>
						<div class='tf-part-item'>
							Tail:
							<<listbox "_bird.tail" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<<if _bird.wings isnot "disabled">>
						<div class='tf-part-item'>
							Wings:
							<<listbox "_bird.wings" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
						<br>
					<</if>>
					<<if _bird.pubes isnot "disabled" and $pbdisable is "f">>
						<div class='tf-part-item'>
							Pubes:
							<<listbox "_bird.pubes" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<br>
				<</if>>
			</div>
			<div class='tf-fox'>
				<<if $fox gt 1>>
					__Fox__
					<br>
					<<if _fox.ears isnot "disabled">>
						<div class='tf-part-item'>
							Ears:
							<<listbox "_fox.ears" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<<if _fox.tail isnot "disabled">>
						<div class='tf-part-item'>
							Tail:
							<<listbox "_fox.tail" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<<if _fox.cheeks isnot "disabled">>
						<div class='tf-part-item'>
							Cheeks:
							<<listbox "_fox.cheeks" autoselect>>
								<<option "Hide" "hidden">>
								<<option "Default" "default">>
							<</listbox>>
						</div>
					<</if>>
					<br>
				<</if>>
			</div>
			<<set $_chimeraOptions to {
				"demoncat_tail" : !["disabled", "hidden"].includesAny(_demon.tail, _cat.tail),
				"demonharpy_wings" : !["disabled", "hidden"].includesAny(_demon.wings, _bird.wings)
			}>>
			<<set $_chimeraEnabled to Object.values($_chimeraOptions).some(o => o) ? "" : " hide">>
			<div @class="'chimera' + $_chimeraEnabled">
				__Chimera__
				<<if $_chimeraOptions.demoncat_tail>>
					/* Using demon cat chimera tail. */
					<div class='tf-part-item'>
						Demon cat tail:
						<<listbox "$chimera.demoncat.tail" autoselect>>
							<<option "Show" true>>
							<<option "Hide" false>>
						<</listbox>>
					</div>
				<</if>>
				<<if $_chimeraOptions.demonharpy_wings>>
					/* Using demon harpy chimera wings. */
					<div class='tf-part-item'>
						Demon harpy wings:
						<<listbox "$chimera.demonharpy.wings" autoselect>>
							<<option "Show" true>>
							<<option "Hide" false>>
						<</listbox>>
					</div>
				<</if>>
			</div>
			<div class="no-numberify">
				<<if !["demon", "cow"].every(transform => T[transform].horns is "disabled")>>
					<<switch $hornslayer>>
						<<case "front">>
							<<link "Prioritise headwear over horns">>
								<<run State.setVar("$hornslayer", "back")>>
								<<run Engine.show()>>
							<</link>>
						<<case "back">>
							<<link "Prioritise horns over headwear">>
								<<run State.setVar("$hornslayer", "front")>>
								<<run Engine.show()>>
							<</link>>
						<<default>>
							<<link "Prioritise horns over headwear">>
								<<run State.setVar("$hornslayer", "front")>>
								<<run Engine.show()>>
							<</link>>
					<</switch>>
					<br>
				<</if>>
				<<if !["demon", "cat", "cow", "wolf", "bird", "fox"].every(transform => T[transform].tail is "disabled")>>
					<<switch $taillayer>>
						<<case "front">>
							<<link "Push tail back">>
								<<run State.setVar("$taillayer", "back")>>
								<<run Engine.show()>>
							<</link>>
						<<case "back">>
							<<link "Move tail forward">>
								<<run State.setVar("$taillayer", "front")>>
								<<run Engine.show()>>
							<</link>>
						<<default>>
							<<link "Push tail back">>
								<<run State.setVar("$taillayer", "back")>>
								<<run Engine.show()>>
							<</link>>
					<</switch>>
					<br>
				<</if>>
				<<if !["angel", "fallen", "demon", "bird"].every(transform => T[transform].wings is "disabled")>>
					<<switch $wingslayer>>
						<<case "front">>
							<<link "Push wings behind">>
								<<run State.setVar("$wingslayer", "back")>>
								<<run Engine.show()>>
							<</link>>
						<<case "back">>
							<<link "Move wings forward">>
								<<run State.setVar("$wingslayer", "front")>>
								<<run Engine.show()>>
							<</link>>
						<<default>>
							<<link "Push wings behind">>
								<<run State.setVar("$wingslayer", "back")>>
								<<run Engine.show()>>
							<</link>>
					<</switch>>
					<br>
				<</if>>
			</div>
		</div>
		<<if _isMenuEnabled>>
			<div id="transformations-colour-selector" class='list sticky centre'>
				<<set _options to ['ffffff', 'ff0000', '00ff00', '0000ff', '590099', '000000']>>
				<<gencoloursquares _options>>
				<<gencolourpicker>>
			</div>
		<</if>>
	</div>
	<<link [[Confirm|$passage]]>>
		<<set $mirrorMenu to "transformation">>
		<<if $transformationParts.cat.heterochromia is "hidden">>
			<<catHeterochromiaTF "hide">>
		<<elseif $cat gte 7 and $cat lte 10>>
			<<catHeterochromiaTF `$cat - 7`>>
		<</if>>
	<</link>>
	<!-- Attach an event to every listbox item to update the PC on the sidebar. -->
	<<script>>
	jQuery('.passage').on('change', 'select.macro-listbox', function (e) {
		Wikifier.wikifyEval('<<updatesidebarimg>>');
	});
	<</script>>
<</widget>>

<<widget "mirrorDebug">>
	<<link "Back">><<replace #mirror>><<mirrorMenu>><</replace>><<numberify "#passages > .passage">><<unset $mirrorMenu>><</link>>
	<br><br>
	<br>
	<<link "<<<">><<set $hairlength -= 1000>><<clamp>><<replace "#statshairlength">><<print Math.trunc($hairlength)>><</replace>><</link>> |
	<<link "<<">><<set $hairlength -= 100>><<clamp>><<replace "#statshairlength">><<print Math.trunc($hairlength)>><</replace>><</link>> |
	<<link "<">><<set $hairlength -= 10>><<clamp>><<replace "#statshairlength">><<print Math.trunc($hairlength)>><</replace>><</link>> |
	Hair length: <span id="statshairlength"><<print Math.trunc($hairlength)>></span>
	| <<link ">">><<set $hairlength += 10>><<clamp>><<replace "#statshairlength">><<print Math.trunc($hairlength)>><</replace>><</link>>
	| <<link ">>">><<set $hairlength += 100>><<clamp>><<replace "#statshairlength">><<print Math.trunc($hairlength)>><</replace>><</link>>
	| <<link ">>>">><<set $hairlength += 1000>><<clamp>><<replace "#statshairlength">><<print Math.trunc($hairlength)>><</replace>><</link>>
	<br>
	<<link "<<<">><<set $fringelength -= 1000>><<clamp>><<replace "#statsfringelength">><<print Math.trunc($fringelength)>><</replace>><</link>> |
	<<link "<<">><<set $fringelength -= 100>><<clamp>><<replace "#statsfringelength">><<print Math.trunc($fringelength)>><</replace>><</link>> |
	<<link "<">><<set $fringelength -= 10>><<clamp>><<replace "#statsfringelength">><<print Math.trunc($fringelength)>><</replace>><</link>> |
	Fringe length: <span id="statsfringelength"><<print Math.trunc($fringelength)>></span>
	| <<link ">">><<set $fringelength += 10>><<clamp>><<replace "#statsfringelength">><<print Math.trunc($fringelength)>><</replace>><</link>>
	| <<link ">>">><<set $fringelength += 100>><<clamp>><<replace "#statsfringelength">><<print Math.trunc($fringelength)>><</replace>><</link>>
	| <<link ">>>">><<set $fringelength += 1000>><<clamp>><<replace "#statsfringelength">><<print Math.trunc($fringelength)>><</replace>><</link>>
	<br>
	Hair Colour (<<print $haircolour>>):
	<<link "Black">><<set $haircolour to "black">><<goto "Wardrobe">><</link>> |
	<<link "Brown">><<set $haircolour to "brown">><<goto "Wardrobe">><</link>> |
	<<link "Red">><<set $haircolour to "red">><<goto "Wardrobe">><</link>> |
	<<link "Ginger">><<set $haircolour to "ginger">><<goto "Wardrobe">><</link>> |
	<<link "Blond">><<set $haircolour to "blond">><<goto "Wardrobe">><</link>> |
	<<link "Green">><<set $haircolour to "green">><<goto "Wardrobe">><</link>> |
	<<link "Blue">><<set $haircolour to "blue">><<goto "Wardrobe">><</link>> |
	<<link "Purple">><<set $haircolour to "purple">><<goto "Wardrobe">><</link>>

	<br><br>

	<<link "Skip day">><<pass 23 hours>><<effects>><<goto "Mirror">><</link>>
	<br>
<</widget>>

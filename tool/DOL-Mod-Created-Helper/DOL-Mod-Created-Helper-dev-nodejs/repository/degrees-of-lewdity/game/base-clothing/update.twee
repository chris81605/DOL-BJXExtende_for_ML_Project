/*
:: Widgets updateClothes [widget]
<<widget "updateClothes-obsolete">>
	<<set _equip to setup.clothes_all_slots>>
	<<set _skip to ["integrity","integrity_max","colour","accessory_colour", "exposed", "vagina_exposed", "anus_exposed", "anal_shield", "one_piece", "skirt_down", "state", "state_top","name_cap","iconFile","accIcon","notuck","skirt","description","colour_options","accessory_colour_options","fabric_strength","integrity_max","bustresize","sleeve_img","breast_img","exposed_base","vagina_exposed_base","anus_exposed_base","state_top_base","state_base","word","femininity","strap","cost","shop","cursed","collared"]>>
	<<set _remap_colours to {"light-pink":"light pink", "blue-steel":"blue steel"}>>

	<!-- 0.3.9.3: adding "hoodposition" variable to all hoodies 
	Just add the variable to hoodies that don't have it, skip it after this -->
	<<if $objectVersion.updateClothes gte 31>>
		<<set _skip.push("hoodposition")>>
	<</if>>

	<<for _i to 0; _i lt _equip.length; _i++>>
		<<set _worn to $worn[_equip[_i]]>>
		<<set _default to setup.clothes[_equip[_i]][clothesIndex(_equip[_i],_worn)]>>
		<<set _keys to Object.keys(_default)>>
		<<for _j to 0; _j lt _keys.length; _j++>>
			<<if _skip.includes(_keys[_j])>>
				<<continue>>
			<</if>>
			<<if _keys[_j] is "outfitPrimary">>
				<<if _worn[_keys[_j]] is undefined and _default[_keys[_j]] isnot undefined>>
					<<set _worn[_keys[_j]] to clone(_default[_keys[_j]])>>
					<<if _worn.one_piece is "broken">>
						<<if _equip[_i] is "upper">>
							<<set _worn[_keys[_j]].lower to "broken">>
						<<elseif _equip[_i] is "under_upper">>
							<<set _worn[_keys[_j]].under_lower to "broken">>
						<</if>>
					<</if>>
				<</if>>
				<<continue>>
			<</if>>
			<<if _keys[_j] is "outfitSecondary">>
				<<if _worn[_keys[_j]] is undefined and _default[_keys[_j]] isnot undefined>>
					<<set _worn[_keys[_j]] to clone(_default[_keys[_j]])>>
					<<if _worn.one_piece is "broken">>
						<<set _worn[_keys[_j]][1] to "broken">>
					<</if>>
				<</if>>
				<<continue>>
			<</if>>
			<<set _worn[_keys[_j]] to clone(_default[_keys[_j]])>>
		<</for>>
		<<set _worn.colour to _remap_colours[_worn.colour] || _worn.colour>>
		<<set _worn.accessory_colour to _remap_colours[_worn.accessory_colour] || _worn.accessory_colour>>
		<<if (_worn.colour is 0 and _default.colour_options.length gt 0) or (_worn.accessory_colour is 0 and _default.accessory_colour_options gt 0)>>
			<<updateClothingColours _worn>>
		<</if>>
		<!--Fix for 0.2.21.x issue-->
		<<if _worn.colour_combat isnot undefined and _default.colour_options.length is 0>>
			<<set _worn.colour to 0>>
		<</if>>
		<<if _worn.accessory_colour_combat isnot undefined and _default.colour_options.length is 0>>
			<<set _worn.accessory_colour to 0>>
		<</if>>
		<!--end of fix-->
		<<if _equip[_i] is "genitals">>
			<<continue>>
		<</if>>
		<<if _worn.name is "Crop top">>
			<<set _worn.name to "crop top">>
		<</if>>

		<<set _carried to $carried[_equip[_i]]>>
		<<set _default to setup.clothes[_equip[_i]][clothesIndex(_equip[_i],_carried)]>>
		<<set _keys to Object.keys(_default)>>
		<<for _j to 0; _j lt _keys.length; _j++>>
			<<if _skip.includes(_keys[_j])>>
				<<continue>>
			<</if>>
			<<if _keys[_j] is "outfitPrimary">>
				<<if _carried[_keys[_j]] is undefined and _default[_keys[_j]] isnot undefined>>
					<<set _carried[_keys[_j]] to clone(_default[_keys[_j]])>>
					<<if _carried.one_piece is "broken">>
						<<if _equip[_i] is "upper">>
							<<set _carried[_keys[_j]].lower to "broken">>
						<<elseif _equip[_i] is "under_upper">>
							<<set _carried[_keys[_j]].under_lower to "broken">>
						<</if>>
					<</if>>
				<</if>>
				<<continue>>
			<</if>>
			<<if _keys[_j] is "outfitSecondary">>
				<<if _carried[_keys[_j]] is undefined and _default[_keys[_j]] isnot undefined>>
					<<set _carried[_keys[_j]] to clone(_default[_keys[_j]])>>
					<<if _carried.one_piece is "broken">>
						<<set _carried[_keys[_j]][1] to "broken">>
					<</if>>
				<</if>>
				<<continue>>
			<</if>>
			<<set _carried[_keys[_j]] to clone(_default[_keys[_j]])>>
		<</for>>
		<<set _carried.colour to _remap_colours[_carried.colour] || _carried.colour>>
		<<set _carried.accessory_colour to _remap_colours[_carried.accessory_colour] || _carried.accessory_colour>>
		<<if (_carried.colour is 0 and _default.colour_options.length gt 0) or (_carried.accessory_colour is 0 and _default.accessory_colour_options gt 0)>>
			<<updateClothingColours _carried>>
		<</if>>
		<!--Fix for 0.2.21.x issue-->
		<<if _carried.colour_combat isnot undefined and _default.colour_options.length is 0>>
			<<set _carried.colour to 0>>
		<</if>>
		<<if _carried.accessory_colour_combat isnot undefined and _default.colour_options.length is 0>>
			<<set _carried.accessory_colour to 0>>
		<</if>>
		<!--end of fix-->
		<<if _carried.name is "Crop top">>
			<<set _carried.name to "crop top">>
		<</if>>
		<<for _j to 0; _j lt $wardrobe[_equip[_i]].length; _j++>>
			<<set _wardrobe to $wardrobe[_equip[_i]][_j]>>
			<<set _default to setup.clothes[_equip[_i]][clothesIndex(_equip[_i],_wardrobe)]>>
			<<set _keys to Object.keys(_default)>>
			<<for _k to 0; _k lt _keys.length; _k++>>
				<<if _skip.includes(_keys[_k])>>
					<<continue>>
				<</if>>
				<<if _keys[_k] is "outfitPrimary">>
					<<if _wardrobe[_keys[_k]] is undefined and _default[_keys[_k]] isnot undefined>>
						<<set _wardrobe[_keys[_k]] to clone(_default[_keys[_k]])>>
						<<if _wardrobe.one_piece is "broken">>
							<<if _equip[_i] is "upper">>
								<<set _wardrobe[_keys[_k]].lower to "broken">>
							<<elseif _equip[_i] is "under_upper">>
								<<set _wardrobe[_keys[_k]].under_lower to "broken">>
							<</if>>
						<</if>>
					<</if>>
					<<continue>>
				<</if>>
				<<if _keys[_k] is "outfitSecondary">>
					<<if _wardrobe[_keys[_k]] is undefined and _default[_keys[_k]] isnot undefined>>
						<<set _wardrobe[_keys[_k]] to clone(_default[_keys[_k]])>>
						<<if _wardrobe.one_piece is "broken">>
							<<set _wardrobe[_keys[_k]][1] to "broken">>
						<</if>>
					<</if>>
					<<continue>>
				<</if>>
				<<set _wardrobe[_keys[_k]] to clone(_default[_keys[_k]])>>
			<</for>>
			<<set _wardrobe.colour to _remap_colours[_wardrobe.colour] || _wardrobe.colour>>
			<<set _wardrobe.accessory_colour to _remap_colours[_wardrobe.accessory_colour] || _wardrobe.accessory_colour>>
			<<if (_wardrobe.colour is 0 and _default.colour_options.length gt 0) or (_wardrobe.accessory_colour is 0 and _default.accessory_colour_options gt 0)>>
				<<updateClothingColours _wardrobe>>
			<</if>>
			<!--Fix for 0.2.21.x issue-->
			<<if _wardrobe.colour_combat isnot undefined and _default.colour_options.length is 0>>
				<<set _wardrobe.colour to 0>>
			<</if>>
			<<if _wardrobe.accessory_colour_combat isnot undefined and _default.colour_options.length is 0>>
				<<set _wardrobe.accessory_colour to 0>>
			<</if>>
			<!--end of fix-->
		<</for>>
	<</for>>
	<<for _i to 0; _i lt $outfit.length; _i++>>
		<<if $outfit[_i].upper is "Crop top">>
			<<set $outfit[_i].upper to "crop top">>
		<</if>>
	<</for>>
<</widget>>

<<widget "updateClothingColours-obsolete">>
	<!-- Used for making clothes colour customisable. Structured in such a way that primary and accessory colours can be updated separately without affecting the other, if applicable. -->
	<!-- This widget should be updated whenever a new clothing item is made colour customisable with the clothing item in question. Colours should be specifically chosen based on whatever best matches the original. -->

	<<switch _args[0].name>>
		<<case "winter jacket">>
			<<set _args[0].colour to (_args[0].colour is 0 ? "black" : _args[0].colour)>>
			<<set _args[0].accessory_colour to (_args[0].accessory_colour is 0 ? "tan" : _args[0].accessory_colour)>>
		<<case "cool shades" "square shades" "round shades" "shield shades" "punk shades">>
			<<set _args[0].colour to (_args[0].colour is 0 ? "black" : _args[0].colour)>>
		<<case "aviators">>
			<<set _args[0].colour to (_args[0].colour is 0 ? "grey" : _args[0].colour)>>
		<<case "glasses">>
			<<set _args[0].colour to (_args[0].colour is 0 ? "silver" : _args[0].colour)>>
		<<case "witch shoes">>
			<<set _args[0].colour to (_args[0].colour is 0 ? "black" : _args[0].colour)>>
		<<default>>
			<!-- Catch-all case if people forget to adjust this widget for whatever clothing item is updated. Can make weird looking clothes if "custom" is selected. -->
			<<set _args[0].colour to (_args[0].colour is 0 ? _default.colour_options.random() : _args[0].colour)>>
			<<set _args[0].accessory_colour to (_args[0].accessory_colour is 0 ? _default.accessory_colour_options.random() : _args[0].accessory_colour)>>
	<</switch>>
<</widget>>
*/

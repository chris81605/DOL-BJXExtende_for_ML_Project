:: Widgets physicalAdjustmentsInit [widget]
<<widget "physicalAdjustmentsInit">>
	<<if $sexStats is undefined>>
		<<set $sexStats to {
			"breasts": {
				"playedWith": 0
			},
			"creampie": {
				"self": {
					"anus":0,
					"mouth":0,
					"vagina":0
				},
				"npc":{
					"anus":0,
					"mouth":0,
					"vagina":0 /* , "tentacle":0 */
				}
			},
			"pills":{
				"pills":{
					'bottom reduction':{autoTake: false, doseTaken: 0, owned: 0, overdose: 0},
					'bottom growth':{autoTake: false, doseTaken: 0, owned: 0, overdose: 0},
					'bottom blocker':{autoTake: false, doseTaken: 0, owned: 0, overdose: 0},
					'breast reduction':{autoTake: false, doseTaken: 0, owned: 0, overdose: 0},
					'breast growth':{autoTake: false, doseTaken: 0, owned: 0, overdose: 0},
					'breast blocker':{autoTake: false, doseTaken: 0, owned: 0, overdose: 0},
					'penis reduction':{autoTake: false, doseTaken: 0, owned: 0, overdose: 0},
					'penis growth':{autoTake: false, doseTaken: 0, owned: 0, overdose: 0},
					'penis blocker':{autoTake: false, doseTaken: 0, owned: 0, overdose: 0},
					'fertility booster':{autoTake: false, doseTaken: 0, owned: 0, overdose: 0},
					'contraceptive':{autoTake: false, doseTaken: 0, owned: 0, overdose: 0},
					'asylum\'s prescription':{autoTake: false, doseTaken: 0, owned: 0, overdose: 0},
					'Dr Harper\'s prescription':{autoTake: false, doseTaken: 0, owned: 0, overdose: 0},
					'Anti-Parasite Cream': { autoTake: false, doseTaken: 0, owned: 0, overdose: 0 },
				},
				"boughtOnce": false,
				"lastTaken":{"bottom":'', "breast":'', "penis":'', "pregnancy":''},
				"mostTaken":{"bottom":'', "breast":'', "penis":'', "pregnancy":''}
			}
		}>>
	<</if>>
	<<if $sexStats.pills.pills && $sexStats.pills.pills["Anti-Parasite Cream"] is undefined>>
		<<set $sexStats.pills.pills["Anti-Parasite Cream"] to { autoTake: false, doseTaken: 0, owned: 0, overdose: 0 }>>
	<</if>>

	<<if $sexStats.anus is undefined>>
		<<set $sexStats.anus to {
			"pregnancy": {
				/*//0: null,old variables, kept for debugging
				//1: null,
				//2: null,
				//3: null,
				//"count": 0,
				//"maxCount": 1,
				//"fertile": false,
				//"fertilised": false,
				//"lowestDaysLeft": null,
				//"lowestTimeLeft": null,
				//"givenBirth": 0,
				//seenDoctor: 0, replaced with $pregnancyStats.parasiteDoctorEvents
				//namesChildren: false, replaced with $pregnancyStats.namesParasitesChild*/
				fetus: [],
				givenBirth: 0,
				parasiteBirthEvents: 0,
				motherStatus: 0,
				type: null,
				awareOf: null,
				timer: null,
				timerEnd: null,
				type: null,
				potentialFathers: [],
				totalBirthEvents: 0,
			},
			"sperm":[],
		}>>
	<</if>>
	<<if $sexStats.anus.pregnancy.fetus is undefined>>
		<<set $sexStats.anus.pregnancy.fetus to []>>
		<<for $_i to 0; $_i lt 4; $_i++>>
			<<if $sexStats.anus.pregnancy[$_i] isnot null>>
				<<run $sexStats.anus.pregnancy.fetus.push(clone($sexStats.anus.pregnancy[$_i]))>>
				<<if $sexStats.anus.pregnancy.fetus.last().stats.gender is "Futa">>
					<<set $sexStats.anus.pregnancy.fetus.last().stats.gender to "Hermaphrodite">>
				<</if>>
				<<set $sexStats.anus.pregnancy.type to "parasite">>
			<</if>>
			<<run delete $sexStats.anus.pregnancy[$_i]>>
		<</for>>
		<<if !$sexStats.anus.pregnancy.parasiteBirthEvents>>
			<<set $sexStats.anus.pregnancy.parasiteBirthEvents to clone($sexStats.anus.pregnancy.givenBirth)>>
			<<set $sexStats.anus.pregnancy.parasiteFeltMovement to clone($sexStats.anus.pregnancy.feltMovement)>>
			<<set $sexStats.anus.pregnancy.givenBirth to 0>>
		<</if>>
		<<pregnancyVar>><!--In case its not been ran before -->
		<<if $sexStats.anus.pregnancy.seenDoctor>>
			<<set $pregnancyStats.parasiteDoctorEvents to clone($sexStats.anus.pregnancy.seenDoctor)>>
		<</if>>
		<<if $sexStats.anus.pregnancy.book>>
			<<set $pregnancyStats.parasiteBook to clone($sexStats.anus.pregnancy.book)>>
		<</if>>
		<<if $sexStats.anus.pregnancy.typesSeen>>
			<<set $pregnancyStats.parasiteTypesSeen to clone($sexStats.anus.pregnancy.typesSeen)>>
		<</if>>
		<<if $sexStats.anus.pregnancy.variantsSeen>>
			<<set $pregnancyStats.parasiteVariantsSeen to clone($sexStats.anus.pregnancy.variantsSeen)>>
		<</if>>

		/*Vagina Parity Variables*/
		<<set $sexStats.anus.pregnancy.awareOf to null>>
		<<set $sexStats.anus.pregnancy.timer to null>>
		<<set $sexStats.anus.pregnancy.timerEnd to null>>
		<<set $sexStats.anus.pregnancy.timerEnd to null>>
		<<set $sexStats.anus.pregnancy.waterBreaking to false>>
		<<set $sexStats.anus.pregnancy.potentialFathers to []>>
		<<set $sexStats.anus.pregnancy.totalBirthEvents to 0>>

		<<set $sexStats.anus.sperm to []>>

		<<run delete $sexStats.anus.pregnancy.maxCount>>
		<<run delete $sexStats.anus.pregnancy.count>>
		<<run delete $sexStats.anus.pregnancy.lowestDaysLeft>>
		<<run delete $sexStats.anus.pregnancy.lowestTimeLeft>>
		<<run delete $sexStats.anus.pregnancy.feltMovement>>
		<<run delete $sexStats.anus.pregnancy.fertile>>
		<<run delete $sexStats.anus.pregnancy.fertilised>>
		<<run delete $sexStats.anus.pregnancy.namesChildren>>
		<<run delete $sexStats.anus.pregnancy.seenDoctor>>
		<<run delete $sexStats.anus.pregnancy.book>>
		<<run delete $sexStats.anus.pregnancy.typesSeen>>
		<<run delete $sexStats.anus.pregnancy.variantsSeen>>
		<<run delete $sexStats.anus.pregnancy.autoRepairDone>>
	<</if>>
	<<if $sexStats.anus.pregnancy.type is undefined>>
		<<if $sexStats.anus.pregnancy.fetus.length is 0>>
			<<set $sexStats.anus.pregnancy.type to null>>
		<</if>>
	<</if>>
	<<if $sexStats.anus.pregnancy.totalBirthEvents is undefined>>
		<<set $sexStats.anus.pregnancy.totalBirthEvents to 0>>
	<</if>>
	<<if $sexStats.anus.pregnancy.potentialFathers is undefined>>
		<<set $sexStats.anus.pregnancy.potentialFathers to []>>
	<</if>>
	<<if !Array.isArray($sexStats.anus.sperm)>>
		<<set $sexStats.anus.sperm to []>>
		<<if Array.isArray($sexStats.anus.pregnancy.potentialFathers) and $sexStats.anus.pregnancy.potentialFathers.length>>
			<<for $_i to 0; $_i lt $sexStats.anus.pregnancy.potentialFathers.length; $_i++>>
				<<set $sexStats.anus.pregnancy.potentialFathers[$_i] to {
					type: $sexStats.anus.pregnancy.potentialFathers[$_i][0],
					source: $sexStats.anus.pregnancy.potentialFathers[$_i][1],
				}>>
			<</for>>
		<</if>>
	<</if>>

	<<if $sexStats.vagina is undefined>>
		<<set _baseDays to random(24,38)>>
		<<if _baseDays lt 26>>
			<<set _baseDaysRng to random(0,4)>>
		<<elseif _baseDays gte 30>>
			<<set _baseDaysRng to random(-4,0)>>
		<<else>>
			<<set _baseDaysRng to random(-2,2)>>
		<</if>>
		/*To change after every cycle*/
		<<set _currentDaysMax to _baseDays + random(0, _baseDaysRng)>>
		/*
			- pregnancy has multiple slots, but pregnancy should only occur when none are taken
			- "baseDays", "baseDaysRng", "lastDaysMax", "currentDaysMax" values should not be changed by multipliers, but by percent if you want a faster/slower cycle during calculations only, do not modifier the values themselves
			- Sperm Template -
			"sperm":{
				"Robin":{"type":"npc", "count":[[daysTillRemoval,cummed inside],[4,3],[3,2]]},
				"Avery":{"type":"npc", "count":[[daysTillRemoval,cummed inside],[5,1]]},
				"slender man":{"type":"npc", "count":[[daysTillRemoval,cummed inside],[5,1]]},
				"Beast":{"type":"dog", "count":[[daysTillRemoval,cummed inside],[5,1]]},
			}
			- Sperm data should be deleted after 3-5 days worth of the base, the entire named object after it is cleared.
			- "CurrentDay" should never be above "lastDaysMax" or "currentDaysMax", "lastDaysMax" should be set to "currentDaysMax" on releasing the egg
			- "recoveryTime" and "recoveryTimeStart" are to track how long the player needs to recover before they can get pregnant again. "recoveryTime" is reduced faster by taking fertility pills and when "totalBirthEvents" is more than 2.
			- "recoveryStage" ranges from 0 to 4, to help with any story text regarding how the player is feeling after giving birth
			- "periodEnabled" is only to prevent the first period based events after recovering from giving birth
		*/
		<<set $sexStats.vagina to {
			"pregnancy": {
				"fetus": [],
				"givenBirth": 0,
				"parasiteBirthEvents": 0,
				"totalBirthEvents": 0,
				"motherStatus": 0,
				"waterBreaking": false,
				"type": null,
				"timer": null,
				"timerEnd": null,
				"awareOf": null,
				"potentialFathers": [],
			},
			"menstruation":{
				"baseDays": _baseDays,
				"baseDaysRng": _baseDaysRng,
				"currentDay": random(0, _baseDays + random(0,_baseDaysRng)),
				"lastDaysMax": _currentDaysMax,
				"currentDaysMax": _currentDaysMax,
				"currentState": "normal",
				"recoveryTime": null,
				"recoveryTimeStart": null,
				"recoveryStage": null,
				"periodEnabled": true,
				"running": false,
				"stages": [0, 0, 0, 0],
			},
			"sperm":[]
		}>>
		<<set _menstruation to $sexStats.vagina.menstruation>>
		<<set _stage2 to Math.round(_menstruation.currentDaysMax * 0.17)>>
		<<if _stage2 gte 4>>
			<<set _stage2-->>
		<</if>>
		<<set _stage3 to Math.round(_menstruation.currentDaysMax * 0.5)>>
		<<if _stage3 lt 13>>
			<<set _stage3++>>
		<<elseif _stage3 gte 18>>
			<<set _stage3-->>
		<</if>>
		<<set _menstruation.stages to [0, _stage2, _stage3, _stage3 + random(1,2) * 0.5]>>

		<<if $player.vaginaExist>>
			<<set $sexStats.vagina.menstruation.running = true>>
		<</if>>
	<</if>>
	<<if $sexStats.vagina.pregnancy.fetus is undefined>>
		<<set $sexStats.vagina.pregnancy.fetus = []>>
		<<run delete $sexStats.vagina.pregnancy.currentCount>>
		<<run delete $sexStats.vagina.pregnancy[0]>>
		<<run delete $sexStats.vagina.pregnancy[1]>>
		<<run delete $sexStats.vagina.pregnancy[2]>>
		<<run delete $sexStats.vagina.pregnancy[3]>>
		<<run delete $sexStats.vagina.pregnancy[4]>>
		<<run delete $sexStats.vagina.pregnancy[5]>>
		<<run delete $sexStats.vagina.pregnancy[6]>>
		<<run delete $sexStats.vagina.pregnancy[7]>>
	<</if>>
	<<if $sexStats.vagina.pregnancy.parasiteBirthEvents is undefined>>
		<<set $sexStats.vagina.pregnancy.parasiteBirthEvents to 0>>
		<<set $sexStats.vagina.pregnancy.parasiteFeltMovement to false>>
		<<set $sexStats.vagina.pregnancy.timerEnd to null>>
		<<run delete $sexStats.vagina.pregnancy.beastMotherStatus>>
		<<run delete $sexStats.vagina.pregnancy.ultrasoundDone>>
		<<run delete $sexStats.vagina.pregnancy.morningSicknessWaking>>
		<<run delete $sexStats.vagina.pregnancy.morningSicknessGeneral>>
		<<run delete $sexStats.vagina.pregnancy.bellySize>>
		<<run delete $sexStats.vagina.pregnancy.timerStart>>
	<</if>>
	<<if $sexStats.vagina.menstruation.nonCycleRng is undefined>>
		<<set $sexStats.vagina.menstruation.nonCycleRng to [random(0,6),random(0,6),random(0,6)]>>
	<</if>>
	<<if !Array.isArray($sexStats.vagina.sperm)>>
		<<set $sexStats.vagina.sperm to []>>
		<<if Array.isArray($sexStats.vagina.pregnancy.potentialFathers) and $sexStats.vagina.pregnancy.potentialFathers.length>>
			<<for $_i to 0; $_i lt $sexStats.vagina.pregnancy.potentialFathers.length; $_i++>>
				<<set $sexStats.vagina.pregnancy.potentialFathers[$_i] to {
					type: $sexStats.vagina.pregnancy.potentialFathers[$_i][0],
					source: $sexStats.vagina.pregnancy.potentialFathers[$_i][1],
				}>>
			<</for>>
		<</if>>
	<</if>>
	<<menstruationCycleState>>
	<<if $parentList is undefined>>
		<<set $parentList to parentFunction.parentList>>
	<</if>>
	<<if !$objectVersion.pregnancyFix>>
		<<run $sexStats.vagina.sperm.forEach(s => {if(s.source.toLowerCase().includes("wolf") && s.type === "human") s.type = "wolf"})>>
		<<run $sexStats.vagina.pregnancy.potentialFathers.forEach(s => {if(s.source.toLowerCase().includes("wolf") && s.type === "human") s.type = "wolf"})>>
		<<run $sexStats.anus.sperm.forEach(s => {if(s.source.toLowerCase().includes("wolf") && s.type === "human") s.type = "wolf"})>>
		<<run $sexStats.anus.pregnancy.potentialFathers.forEach(s => {if(s.source.toLowerCase().includes("wolf") && s.type === "human") s.type = "wolf"})>>
		<<if $sexStats.vagina.pregnancy.type is "human" and $sexStats.vagina.pregnancy.fetus[0].father.toLowerCase().includes("wolf")>>
			<<set $sexStats.vagina.pregnancy.type to "wolf">>

			<<run $sexStats.vagina.pregnancy.fetus.forEach(child => {
				child.type = "wolf";
				const furColour = ["gray", "brown", "tan", "white"];
				if (child.father === "Black Wolf") {
					furColour.concat(["black", "black", "black"]);
				}
				child.features.hairColour = furColour[random(0, furColour.length - 1)];
				child.features.monster = 0;
				delete child.features.skinColor;
				delete child.features.beastTransform;
				delete child.features.divineTransform;
				delete child.features.clothes;
			})>>
		<</if>>
		<<set $objectVersion.pregnancyFix to 1>>
	<</if>>
<</widget>>
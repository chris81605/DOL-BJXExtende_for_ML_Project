:: Widgets Persistent NPCs [widget]
/*For saving generic NPC data so they can be loaded later*/
<<widget "saveNPC">>
	/*First argument is the NPClist index of the NPC to be saved. Second argument is the string you want to save it under.*/
	<<if _args[0] gte 0 and _args[1]>>
		<<set $_name to _args[1]>>
		<<set $_slot to _args[0]>>
		<<if EventSystem.isSlotTaken($_slot)>>
			<<set $per_npc[$_name] to clone($NPCList[$_slot])>>
			/*ToDo: Pregnancy, Condoms not yet compatible with NPC saving and loading */
			<<set $per_npc[$_name].condom to false>>
			<<run delete $per_npc[$_name].condomAsk>>
			<<run delete $per_npc[$_name].condomCanGive>>
			/*Clears name from name pool */
			<<if $NPCList[$_slot].pronoun is "f">>
				<<set $NPC_names_f.delete($NPCList[$_slot].name)>>
			<<else>>
				<<set $NPC_names_m.delete($NPCList[$_slot].name)>>
			<</if>>
		<<else>>
			<<run Errors.report(`saveNPC called with invalid or empty NPCList slot (${$_slot})`,
			{
				Stacktrace : Utils.GetStack(),
				Name : $_name,
				Slot : $_slot,
			})>>
		<</if>>
	<</if>>
<</widget>>

<<widget "loadNPC">>
	<!-- Checks if endevent was properly used after the last event -->
	<<checkEventNPC _args[0]>>
	/*First argument is the NPClist you want the NPC to fill. Second argument is the string you want to load, as saved with saveNPC.*/
	<<if _args[0] gte 0 and _args[1]>>
		<<set $_name to _args[1]>>
		<<set $_slot to _args[0]>>
		<<if $per_npc[$_name] neq null>>
			<<set $NPCList[$_slot] to clone($per_npc[$_name])>>
			<<if $enemyno lt 6>><<set $enemyno += 1>><</if>><<set $enemynomax to $enemyno>>
			<<set $monster to ($NPCList[$_slot].monster is "monster" ? 1 : 0)>>
			<<run EventSystem.push($passage, $_slot, $timeStamp)>>
		<<else>>
			<<run Errors.report(`loadNPC called with an undefined NPC name (${$_name})`, {
				Stacktrace : Utils.GetStack(),
				Name : $_name,
				Slot : $_slot,
			})>>

			<<set $_genslot to $_slot + 1>>
			<<set $_parts to $_name.split("_")>>
			<<if $_name is "black_dog">>
				<<generateBEAST $_genslot dog>>
				<<set $enemytype to "beast">>
				<<set $monster to ($NPCList[$_slot].monster is "monster" ? 1 : 0)>>
			<<elseif ["guard", "inmate"].includes($_parts[1])>>
				<!-- _guard or _inmate -->
				<<generateRole $_slot $_parts[0] $_parts[1]>> <!-- uses 0-5 not 1-6 -->
			<<else>>
				<<generateNPC $_genslot>>
			<</if>>
			<<saveNPC $_slot $_name>>
		<</if>>
		<<set $NPCList[$_slot].per to $_name>>
	<</if>>
<</widget>>

<<widget "updateNPC">>
	/* updates NPC data, like virginity, that would normally be wiped by endevent */
	<<set $per_npc[_args[0].per].virginity to _args[0].virginity>>
<</widget>>

<<widget "clearNPC">>
	/*Clears persistent NPC data for a single NPC. Argument is the string the NPC was saved under.*/
	<<if _args[0]>>
		<<set $_name to _args[0]>>
		/*Adds name back into name pool */
		<<if $per_npc[$_name] and $per_npc[$_name].name>>
			<<if $per_npc[$_name].pronoun is "f">>
				<<set $NPC_names_f.pushUnique($per_npc[$_name].name)>>
			<<else>>
				<<set $NPC_names_m.pushUnique($per_npc[$_name].name)>>
			<</if>>
		<</if>>
		<<run delete $per_npc[$_name]>>
	<</if>>
<</widget>>

<<widget "compressNPC">>
	/*First argument is the NPClist index of the NPC to be saved. Second argument is the string you want to save it under.*/
	<<if _args[0] gte 0 and _args[1]>>
		<<set $_name to _args[1]>>
		<<set $_nameInt to 0>>
		<<for $_key range Object.keys($storedNPCs).filter(key => key.includes($_name))>>
			<<if $_key is ($_name + "_" + $_nameInt)>>
				<<set $_nameInt++>>
			<<else>>
				<<break>>
			<</if>>
		<</for>>
		<<set $_name to $_name + "_" + $_nameInt>>
		<<set $_slot to _args[0]>>
		<<if EventSystem.isSlotTaken($_slot)>>
			<<set $storedNPCs[$_name] to {
				npc: npcCompressor($NPCList[$_slot]),
			}>>
			<<set _lastCompressedName to $_name>>
		<<else>>
			<<run Errors.report(`saveNPCPreg called with invalid or empty NPCList slot (${$_slot})`,
			{
				Stacktrace : Utils.GetStack(),
				Name : $_name,
				Slot : $_slot,
			})>>
		<</if>>
	<</if>>
<</widget>>

<<widget "updatePersistentNPCs">>
	<<if $passage isnot "start" and $per_npc and Object.keys($per_npc).length gt 0>>
		<<for $_i, $_value range $per_npc>>
			<!-- Set Pronoun -->
			<<if $per_npc[$_i].pronoun is "none" or _args[0] is "genders">>
				<<if maleChance() lt random(1, 100)>>
					<<set $per_npc[$_i].pronoun to "f">>
				<<else>>
					<<set $per_npc[$_i].pronoun to "m">>
				<</if>>
			<</if>>
			<!-- Set Gender -->
			<<if $per_npc[$_i].gender is "none" or _args[0] is "genders">>
				<<if $per_npc[$_i].pronoun is "m">>
					<<if random(0, 99) gte $cbchance>>
						<<set $per_npc[$_i].gender to "m">>
					<<else>>
						<<set $per_npc[$_i].gender to "f">>
					<</if>>
				<<elseif $per_npc[$_i].pronoun is "f">>
					<<if random(0, 99) gte $dgchance>>
						<<set $per_npc[$_i].gender to "f">>
					<<else>>
						<<set $per_npc[$_i].gender to "m">>
					<</if>>
				<</if>>
			<</if>>

			<!-- Set Genital Existence -->
			<<if $per_npc[$_i].type isnot "human">>
				<<set $per_npc[$_i].penis to ($per_npc[$_i].gender !== "f" ? 0 : "none")>>
				<<set $per_npc[$_i].vagina to ($per_npc[$_i].gender !== "m" ? 0 : "none")>>
			<<else>>
				<<set $per_npc[$_i].penis to ($per_npc[$_i].gender !== "f" ? "clothed" : "none")>>
				<<set $per_npc[$_i].vagina to ($per_npc[$_i].gender !== "m" ? "clothed" : "none")>>
			<</if>>

			<!-- Set breast defaults-->

			<<set _b_mod_lower to Math.clamp($breast_mod, 0, 12)>>
			<<set _b_mod_upper to Math.clamp($breast_mod + 12, 0, 12)>>

			<!-- can't use breastsize, since that would either break the numberslider
			or make one of the sizes always be randomised,
			but can use breastdesc not being changed from 0 as a substitute -->
			<<if $per_npc[$_i].breastdesc is 0 or _args[0] is "breasts">>
				<<if $per_npc[$_i].pronoun is "m">>
					<<set $per_npc[$_i].breastsize to 0>>
				<<else>>
					<<set $per_npc[$_i].breastsize to random(_b_mod_lower, _b_mod_upper)>>
				<</if>>
			<</if>>
			<<if $per_npc[$_i].breastsize gt 0>>
				<<set _brdes to ["乳头","微隆的","小巧的","偏小的","坚挺的","适中的","饱满的","硕大的","丰腴的","高耸的","巨大的","庞大的","宏伟的"]>>
				<<set $per_npc[$_i].breastdesc to _brdes[$per_npc[$_i].breastsize]+"乳房">>
			<<else>>
				<<set $per_npc[$_i].breastdesc to "乳头">>
			<</if>>
			<<set $per_npc[$_i].breastsdesc to $per_npc[$_i].breastdesc + "">>

			<!-- Set pp to defaults-->

			/* New way to set upper and lower bounds.
			* This method makes use of all other slider positions, but does nothing when slider is between -1 and 1,
			* for a total of 15 unique positions vs the current method's 9. (max would be 17)
			* Changing the penis_mod slider to range from -7 to 7 would work to make every slider position unique here, but potentially affects unnamed npc generation.
			*/

			/*
			<<set _p_mod_upper to 8>><<set _p_mod_lower to 1>>
			<<if $penis_mod gt 0>>
				<<set _p_mod_lower += $penis_mod - 1>>
			<<elseif $penis_mod lt 0>>
				<<set _p_mod_upper += $penis_mod + 1>>
			<</if>>

			alternative way to write that:
			<<set _p_mod_lower to ($penis_mod > 0 ? $penis_mod : 1)>>
			<<set _p_mod_upper to ($penis_mod < 0 ? 9 + $penis_mod : 8)>>
			*/

			<<if $penis_mod is 8>>
				<<set _p_mod_upper to 8>><<set _p_mod_lower to 8>>
			<<elseif $penis_mod gte 6>>
				<<set _p_mod_upper to 8>><<set _p_mod_lower to 7>>
			<<elseif $penis_mod gte 4>>
				<<set _p_mod_upper to 8>><<set _p_mod_lower to 5>>
			<<elseif $penis_mod gte 2>>
				<<set _p_mod_upper to 8>><<set _p_mod_lower to 3>>
			<<elseif $penis_mod gte 0>>
				<<set _p_mod_upper to 8>><<set _p_mod_lower to 1>>
			<<elseif $penis_mod gte -2>>
				<<set _p_mod_upper to 7>><<set _p_mod_lower to 1>>
			<<elseif $penis_mod gte -4>>
				<<set _p_mod_upper to 5>><<set _p_mod_lower to 1>>
			<<elseif $penis_mod gte -6>>
				<<set _p_mod_upper to 3>><<set _p_mod_lower to 1>>
			<<else>>
				<<set _p_mod_upper to 1>><<set _p_mod_lower to 1>>
			<</if>>

			<<if $per_npc[$_i].penissize is 0 or _args[0] is "penis">>
				<<if $per_npc[$_i].gender is "f">>
					<<set $per_npc[$_i].penissize to 0>>
					<<set $per_npc[$_i].penisdesc to "none">>
				<<else>>
					<<switch random(_p_mod_lower, _p_mod_upper)>>
					<<case 8>>
						<<set $per_npc[$_i].penisdesc to either("硕大肉棒","庞大肉棒","巨大肉棒","极大肉棒","超大肉棒","宏伟肉棒")>>
						<<set $per_npc[$_i].penissize to 4>>
					<<case 5 6 7>>
						<<set $per_npc[$_i].penisdesc to either("厚重肉棒","笨重肉棒","大号肉棒","粗大肉棒","狰狞肉棒","肥厚肉棒")>>
						<<set $per_npc[$_i].penissize to 3>>
					<<case 2 3 4>>
						<<set $per_npc[$_i].penisdesc to "阴茎">>
						<<set $per_npc[$_i].penissize to 2>>
					<<default>>
						<<set $per_npc[$_i].penisdesc to either("细小阴茎","废物阴茎","可怜阴茎","小小阴茎","迷你阴茎","微型阴茎")>>
						<<set $per_npc[$_i].penissize to 1>>
					<</switch>>
				<</if>>
			<</if>>
			<!-- Set pp to size in case PC selected it-->
			<<if $per_npc[$_i].penissize isnot 0>>
				<<switch $per_npc[$_i].penissize>>
				<<case 4>>
					<<set $per_npc[$_i].penisdesc to either("硕大肉棒","庞大肉棒","巨大肉棒","极大肉棒","超大肉棒","宏伟肉棒")>>
				<<case 3>>
					<<set $per_npc[$_i].penisdesc to either("厚重肉棒","笨重肉棒","大号肉棒","粗大肉棒","狰狞肉棒","肥厚肉棒")>>
				<<case 1>>
					<<set $per_npc[$_i].penisdesc to either("细小阴茎","废物阴茎","可怜阴茎","小小阴茎","迷你阴茎","微型阴茎")>>
				<<default>>
					<<set $per_npc[$_i].penisdesc to "阴茎">>
				<</switch>>
			<</if>>
			<<generatePronouns $per_npc[$_i]>>
		<</for>>
	<</if>>
<</widget>>

<<widget "updateNPCsFirst">>
	/*Adds new variables to saved NPCs.*/
	<<for $_per_keys range Object.keys($per_npc)>>
		<<set $per_npc[$_per_keys][_args[0]] to _args[1]>>
	<</for>>
<</widget>>

<<widget "updateNPCsSecond">>
	<<for $_per_keys range Object.keys($per_npc)>>
		<<set $per_npc[$_per_keys][_args[0]][_args[1]] to _args[2]>>
	<</for>>
<</widget>>